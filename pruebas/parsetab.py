
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightIGUALrightIGUALQUEleftMAYQUEMENQUEleftMASMENOSleftPORDIVIDIDOleftPARIZQPARDERleftLLAVIZQLLAVDERAND BREAK CHAR COMA DECIMAL DEF DIVIDIDO DOBPUNTO ELIF ELSE ENTERO FLOAT FOR ID IF IGUAL IGUALQUE IN INT LLAVDER LLAVIZQ MAS MAYIGUAL MAYQUE MENIGUAL MENOS MENQUE NIGUALQUE OR PARDER PARIZQ POR PRINT PTCOMA RANGE RETURN STRING VOID WHILE\n    program : function program\n            | external-declaration program\n            | empty\n    \n    external-declaration : type assignment PTCOMA\n    \n    declaration : type assignment PTCOMA\n                | assignment PTCOMA\n                | function_call PTCOMA\n    \n    assignment : ID IGUAL assignment\n               | ID IGUAL function_call\n               | ID COMA assignment\n               | ENTERO COMA assignment\n               | ID MAS assignment\n               | ID MENOS assignment\n               | ID POR assignment\n               | ID DIVIDIDO assignment\n               | ENTERO MAS assignment\n               | ENTERO MENOS assignment\n               | ENTERO POR assignment\n               | ENTERO DIVIDIDO assignment\n               | STRING\n               | PARIZQ assignment PARDER\n               | MENOS assignment\n               | ENTERO MAS MAS\n               | ID MAS MAS\n               | ENTERO MENOS MENOS\n               | ID MENOS MENOS\n               | ENTERO\n               | ID\n    \n    function_call : ID PARIZQ PARDER\n                  | ID PARIZQ assignment PARDER\n    \n    function : type ID PARIZQ argument_list_option PARDER compound_statement\n    argument_list_option : argument_list\n                         | empty\n    argument_list : argument_list COMA argument\n                  | argument\n    argument : type ID\n    compound_statement : LLAVIZQ statement_list LLAVDER\n    statement_list : statement_list statement\n                   | empty\n    statement : iteration_statement\n              | declaration\n              | selection_statement\n              | return-statement\n    \n    type : INT\n         | FLOAT\n         | CHAR\n         | VOID\n    \n    iteration_statement : WHILE PARIZQ expression PARDER compound_statement\n                        | WHILE PARIZQ expression PARDER statement\n    \n    selection_statement : IF PARIZQ expression PARDER compound_statement\n                        | IF PARIZQ expression PARDER statement\n                        | IF PARIZQ expression PARDER compound_statement ELSE compound_statement\n                        | IF PARIZQ expression PARDER compound_statement ELSE statement\n                        | IF PARIZQ expression PARDER statement ELSE compound_statement\n                        | IF PARIZQ expression PARDER statement ELSE statement\n    \n    return-statement : RETURN PTCOMA\n                     | RETURN expression PTCOMA\n    \n    expression : expression IGUALQUE expression\n               | expression MENQUE expression\n               | expression MAYQUE expression\n               | expression AND expression\n               | expression OR expression\n               | assignment\n    empty :'
    
_lr_action_items = {'$end':([0,1,2,3,4,10,11,27,61,69,],[-64,0,-64,-64,-3,-1,-2,-4,-31,-37,]),'INT':([0,2,3,18,27,59,61,62,66,67,69,70,71,72,73,74,83,84,86,90,92,98,99,105,106,107,108,109,110,111,112,113,114,],[6,6,6,6,-4,6,-31,-64,6,-39,-37,-38,-40,-41,-42,-43,-6,-7,-56,-5,-57,6,6,-48,-49,-50,-51,6,6,-52,-53,-55,-54,]),'FLOAT':([0,2,3,18,27,59,61,62,66,67,69,70,71,72,73,74,83,84,86,90,92,98,99,105,106,107,108,109,110,111,112,113,114,],[7,7,7,7,-4,7,-31,-64,7,-39,-37,-38,-40,-41,-42,-43,-6,-7,-56,-5,-57,7,7,-48,-49,-50,-51,7,7,-52,-53,-55,-54,]),'CHAR':([0,2,3,18,27,59,61,62,66,67,69,70,71,72,73,74,83,84,86,90,92,98,99,105,106,107,108,109,110,111,112,113,114,],[8,8,8,8,-4,8,-31,-64,8,-39,-37,-38,-40,-41,-42,-43,-6,-7,-56,-5,-57,8,8,-48,-49,-50,-51,8,8,-52,-53,-55,-54,]),'VOID':([0,2,3,18,27,59,61,62,66,67,69,70,71,72,73,74,83,84,86,90,92,98,99,105,106,107,108,109,110,111,112,113,114,],[9,9,9,9,-4,9,-31,-64,9,-39,-37,-38,-40,-41,-42,-43,-6,-7,-56,-5,-57,9,9,-48,-49,-50,-51,9,9,-52,-53,-55,-54,]),'ID':([5,6,7,8,9,13,16,19,20,21,22,23,24,28,29,30,31,32,34,45,53,60,62,66,67,69,70,71,72,73,74,76,80,81,83,84,85,86,90,92,93,94,95,96,97,98,99,105,106,107,108,109,110,111,112,113,114,],[12,-44,-45,-46,-47,26,26,39,26,26,26,26,26,26,26,26,26,26,57,26,26,26,-64,39,-39,-37,-38,-40,-41,-42,-43,26,26,26,-6,-7,26,-56,-5,-57,26,26,26,26,26,39,39,-48,-49,-50,-51,39,39,-52,-53,-55,-54,]),'ENTERO':([5,6,7,8,9,13,16,19,20,21,22,23,24,28,29,30,31,32,45,53,60,62,66,67,69,70,71,72,73,74,76,80,81,83,84,85,86,90,92,93,94,95,96,97,98,99,105,106,107,108,109,110,111,112,113,114,],[15,-44,-45,-46,-47,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-64,15,-39,-37,-38,-40,-41,-42,-43,15,15,15,-6,-7,15,-56,-5,-57,15,15,15,15,15,15,15,-48,-49,-50,-51,15,15,-52,-53,-55,-54,]),'STRING':([5,6,7,8,9,13,16,19,20,21,22,23,24,28,29,30,31,32,45,53,60,62,66,67,69,70,71,72,73,74,76,80,81,83,84,85,86,90,92,93,94,95,96,97,98,99,105,106,107,108,109,110,111,112,113,114,],[17,-44,-45,-46,-47,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-64,17,-39,-37,-38,-40,-41,-42,-43,17,17,17,-6,-7,17,-56,-5,-57,17,17,17,17,17,17,17,-48,-49,-50,-51,17,17,-52,-53,-55,-54,]),'PARIZQ':([5,6,7,8,9,12,13,16,19,20,21,22,23,24,28,29,30,31,32,39,45,53,60,62,66,67,69,70,71,72,73,74,75,76,79,80,81,83,84,85,86,90,92,93,94,95,96,97,98,99,105,106,107,108,109,110,111,112,113,114,],[13,-44,-45,-46,-47,18,13,13,13,13,13,13,13,13,13,13,13,13,13,60,13,13,13,-64,13,-39,-37,-38,-40,-41,-42,-43,81,13,85,13,13,-6,-7,13,-56,-5,-57,13,13,13,13,13,13,13,-48,-49,-50,-51,13,13,-52,-53,-55,-54,]),'MENOS':([5,6,7,8,9,12,13,15,16,19,20,21,22,23,24,26,28,29,30,31,32,39,45,53,60,62,66,67,69,70,71,72,73,74,76,80,81,83,84,85,86,90,92,93,94,95,96,97,98,99,105,106,107,108,109,110,111,112,113,114,],[16,-44,-45,-46,-47,22,16,30,16,16,16,16,45,16,16,22,16,16,53,16,16,22,16,16,16,-64,16,-39,-37,-38,-40,-41,-42,-43,16,16,16,-6,-7,16,-56,-5,-57,16,16,16,16,16,16,16,-48,-49,-50,-51,16,16,-52,-53,-55,-54,]),'IGUAL':([12,26,39,],[19,19,19,]),'COMA':([12,15,26,36,38,39,57,63,],[20,28,20,59,-35,20,-36,-34,]),'MAS':([12,15,21,26,29,39,],[21,29,43,21,51,21,]),'POR':([12,15,26,39,],[23,31,23,23,]),'DIVIDIDO':([12,15,26,39,],[24,32,24,24,]),'PTCOMA':([12,14,15,17,26,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,64,68,77,78,80,82,87,88,100,101,102,103,104,],[-28,27,-27,-20,-28,-22,-28,-8,-9,-10,-24,-12,-26,-13,-14,-15,-21,-11,-23,-16,-25,-17,-18,-19,-29,-30,83,84,86,90,92,-63,-58,-59,-60,-61,-62,]),'PARDER':([15,17,18,25,26,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,63,64,65,68,88,89,91,100,101,102,103,104,],[-27,-20,-64,49,-28,-22,58,-32,-33,-35,-28,-8,-9,-10,-24,-12,-26,-13,-14,-15,-21,-11,-23,-16,-25,-17,-18,-19,-36,64,-34,-29,68,-30,-63,98,99,-58,-59,-60,-61,-62,]),'IGUALQUE':([15,17,26,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,64,68,87,88,89,91,100,101,102,103,104,],[-27,-20,-28,-22,-28,-8,-9,-10,-24,-12,-26,-13,-14,-15,-21,-11,-23,-16,-25,-17,-18,-19,-29,-30,93,-63,93,93,93,-59,-60,93,93,]),'MENQUE':([15,17,26,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,64,68,87,88,89,91,100,101,102,103,104,],[-27,-20,-28,-22,-28,-8,-9,-10,-24,-12,-26,-13,-14,-15,-21,-11,-23,-16,-25,-17,-18,-19,-29,-30,94,-63,94,94,94,-59,-60,94,94,]),'MAYQUE':([15,17,26,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,64,68,87,88,89,91,100,101,102,103,104,],[-27,-20,-28,-22,-28,-8,-9,-10,-24,-12,-26,-13,-14,-15,-21,-11,-23,-16,-25,-17,-18,-19,-29,-30,95,-63,95,95,95,-59,-60,95,95,]),'AND':([15,17,26,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,64,68,87,88,89,91,100,101,102,103,104,],[-27,-20,-28,-22,-28,-8,-9,-10,-24,-12,-26,-13,-14,-15,-21,-11,-23,-16,-25,-17,-18,-19,-29,-30,96,-63,96,96,-58,-59,-60,96,96,]),'OR':([15,17,26,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,64,68,87,88,89,91,100,101,102,103,104,],[-27,-20,-28,-22,-28,-8,-9,-10,-24,-12,-26,-13,-14,-15,-21,-11,-23,-16,-25,-17,-18,-19,-29,-30,97,-63,97,97,-58,-59,-60,97,97,]),'LLAVIZQ':([58,98,99,109,110,],[62,62,62,62,62,]),'LLAVDER':([62,66,67,69,70,71,72,73,74,83,84,86,90,92,105,106,107,108,111,112,113,114,],[-64,69,-39,-37,-38,-40,-41,-42,-43,-6,-7,-56,-5,-57,-48,-49,-50,-51,-52,-53,-55,-54,]),'WHILE':([62,66,67,69,70,71,72,73,74,83,84,86,90,92,98,99,105,106,107,108,109,110,111,112,113,114,],[-64,75,-39,-37,-38,-40,-41,-42,-43,-6,-7,-56,-5,-57,75,75,-48,-49,-50,-51,75,75,-52,-53,-55,-54,]),'IF':([62,66,67,69,70,71,72,73,74,83,84,86,90,92,98,99,105,106,107,108,109,110,111,112,113,114,],[-64,79,-39,-37,-38,-40,-41,-42,-43,-6,-7,-56,-5,-57,79,79,-48,-49,-50,-51,79,79,-52,-53,-55,-54,]),'RETURN':([62,66,67,69,70,71,72,73,74,83,84,86,90,92,98,99,105,106,107,108,109,110,111,112,113,114,],[-64,80,-39,-37,-38,-40,-41,-42,-43,-6,-7,-56,-5,-57,80,80,-48,-49,-50,-51,80,80,-52,-53,-55,-54,]),'ELSE':([69,71,72,73,74,83,84,86,90,92,105,106,107,108,111,112,113,114,],[-37,-40,-41,-42,-43,-6,-7,-56,-5,-57,-48,-49,-50,-51,-52,-53,-55,-54,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,10,11,]),'function':([0,2,3,],[2,2,2,]),'external-declaration':([0,2,3,],[3,3,3,]),'empty':([0,2,3,18,62,],[4,4,4,37,67,]),'type':([0,2,3,18,59,66,98,99,109,110,],[5,5,5,34,34,76,76,76,76,76,]),'assignment':([5,13,16,19,20,21,22,23,24,28,29,30,31,32,45,53,60,66,76,80,81,85,93,94,95,96,97,98,99,109,110,],[14,25,33,40,42,44,46,47,48,50,52,54,55,56,33,33,65,77,82,88,88,88,88,88,88,88,88,77,77,77,77,]),'argument_list_option':([18,],[35,]),'argument_list':([18,],[36,]),'argument':([18,59,],[38,63,]),'function_call':([19,66,98,99,109,110,],[41,78,78,78,78,78,]),'compound_statement':([58,98,99,109,110,],[61,105,107,111,114,]),'statement_list':([62,],[66,]),'statement':([66,98,99,109,110,],[70,106,108,112,113,]),'iteration_statement':([66,98,99,109,110,],[71,71,71,71,71,]),'declaration':([66,98,99,109,110,],[72,72,72,72,72,]),'selection_statement':([66,98,99,109,110,],[73,73,73,73,73,]),'return-statement':([66,98,99,109,110,],[74,74,74,74,74,]),'expression':([80,81,85,93,94,95,96,97,],[87,89,91,100,101,102,103,104,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function program','program',2,'p_program','AnalizadorParserCopy.py',28),
  ('program -> external-declaration program','program',2,'p_program','AnalizadorParserCopy.py',29),
  ('program -> empty','program',1,'p_program','AnalizadorParserCopy.py',30),
  ('external-declaration -> type assignment PTCOMA','external-declaration',3,'p_external_declaration','AnalizadorParserCopy.py',44),
  ('declaration -> type assignment PTCOMA','declaration',3,'p_declaration','AnalizadorParserCopy.py',57),
  ('declaration -> assignment PTCOMA','declaration',2,'p_declaration','AnalizadorParserCopy.py',58),
  ('declaration -> function_call PTCOMA','declaration',2,'p_declaration','AnalizadorParserCopy.py',59),
  ('assignment -> ID IGUAL assignment','assignment',3,'p_assignment','AnalizadorParserCopy.py',69),
  ('assignment -> ID IGUAL function_call','assignment',3,'p_assignment','AnalizadorParserCopy.py',70),
  ('assignment -> ID COMA assignment','assignment',3,'p_assignment','AnalizadorParserCopy.py',71),
  ('assignment -> ENTERO COMA assignment','assignment',3,'p_assignment','AnalizadorParserCopy.py',72),
  ('assignment -> ID MAS assignment','assignment',3,'p_assignment','AnalizadorParserCopy.py',73),
  ('assignment -> ID MENOS assignment','assignment',3,'p_assignment','AnalizadorParserCopy.py',74),
  ('assignment -> ID POR assignment','assignment',3,'p_assignment','AnalizadorParserCopy.py',75),
  ('assignment -> ID DIVIDIDO assignment','assignment',3,'p_assignment','AnalizadorParserCopy.py',76),
  ('assignment -> ENTERO MAS assignment','assignment',3,'p_assignment','AnalizadorParserCopy.py',77),
  ('assignment -> ENTERO MENOS assignment','assignment',3,'p_assignment','AnalizadorParserCopy.py',78),
  ('assignment -> ENTERO POR assignment','assignment',3,'p_assignment','AnalizadorParserCopy.py',79),
  ('assignment -> ENTERO DIVIDIDO assignment','assignment',3,'p_assignment','AnalizadorParserCopy.py',80),
  ('assignment -> STRING','assignment',1,'p_assignment','AnalizadorParserCopy.py',81),
  ('assignment -> PARIZQ assignment PARDER','assignment',3,'p_assignment','AnalizadorParserCopy.py',82),
  ('assignment -> MENOS assignment','assignment',2,'p_assignment','AnalizadorParserCopy.py',83),
  ('assignment -> ENTERO MAS MAS','assignment',3,'p_assignment','AnalizadorParserCopy.py',84),
  ('assignment -> ID MAS MAS','assignment',3,'p_assignment','AnalizadorParserCopy.py',85),
  ('assignment -> ENTERO MENOS MENOS','assignment',3,'p_assignment','AnalizadorParserCopy.py',86),
  ('assignment -> ID MENOS MENOS','assignment',3,'p_assignment','AnalizadorParserCopy.py',87),
  ('assignment -> ENTERO','assignment',1,'p_assignment','AnalizadorParserCopy.py',88),
  ('assignment -> ID','assignment',1,'p_assignment','AnalizadorParserCopy.py',89),
  ('function_call -> ID PARIZQ PARDER','function_call',3,'p_function_call','AnalizadorParserCopy.py',100),
  ('function_call -> ID PARIZQ assignment PARDER','function_call',4,'p_function_call','AnalizadorParserCopy.py',101),
  ('function -> type ID PARIZQ argument_list_option PARDER compound_statement','function',6,'p_function','AnalizadorParserCopy.py',111),
  ('argument_list_option -> argument_list','argument_list_option',1,'p_function','AnalizadorParserCopy.py',112),
  ('argument_list_option -> empty','argument_list_option',1,'p_function','AnalizadorParserCopy.py',113),
  ('argument_list -> argument_list COMA argument','argument_list',3,'p_function','AnalizadorParserCopy.py',114),
  ('argument_list -> argument','argument_list',1,'p_function','AnalizadorParserCopy.py',115),
  ('argument -> type ID','argument',2,'p_function','AnalizadorParserCopy.py',116),
  ('compound_statement -> LLAVIZQ statement_list LLAVDER','compound_statement',3,'p_function','AnalizadorParserCopy.py',117),
  ('statement_list -> statement_list statement','statement_list',2,'p_function','AnalizadorParserCopy.py',118),
  ('statement_list -> empty','statement_list',1,'p_function','AnalizadorParserCopy.py',119),
  ('statement -> iteration_statement','statement',1,'p_function','AnalizadorParserCopy.py',120),
  ('statement -> declaration','statement',1,'p_function','AnalizadorParserCopy.py',121),
  ('statement -> selection_statement','statement',1,'p_function','AnalizadorParserCopy.py',122),
  ('statement -> return-statement','statement',1,'p_function','AnalizadorParserCopy.py',123),
  ('type -> INT','type',1,'p_type','AnalizadorParserCopy.py',133),
  ('type -> FLOAT','type',1,'p_type','AnalizadorParserCopy.py',134),
  ('type -> CHAR','type',1,'p_type','AnalizadorParserCopy.py',135),
  ('type -> VOID','type',1,'p_type','AnalizadorParserCopy.py',136),
  ('iteration_statement -> WHILE PARIZQ expression PARDER compound_statement','iteration_statement',5,'p_iteration_statement','AnalizadorParserCopy.py',143),
  ('iteration_statement -> WHILE PARIZQ expression PARDER statement','iteration_statement',5,'p_iteration_statement','AnalizadorParserCopy.py',144),
  ('selection_statement -> IF PARIZQ expression PARDER compound_statement','selection_statement',5,'p_selection_statement','AnalizadorParserCopy.py',154),
  ('selection_statement -> IF PARIZQ expression PARDER statement','selection_statement',5,'p_selection_statement','AnalizadorParserCopy.py',155),
  ('selection_statement -> IF PARIZQ expression PARDER compound_statement ELSE compound_statement','selection_statement',7,'p_selection_statement','AnalizadorParserCopy.py',156),
  ('selection_statement -> IF PARIZQ expression PARDER compound_statement ELSE statement','selection_statement',7,'p_selection_statement','AnalizadorParserCopy.py',157),
  ('selection_statement -> IF PARIZQ expression PARDER statement ELSE compound_statement','selection_statement',7,'p_selection_statement','AnalizadorParserCopy.py',158),
  ('selection_statement -> IF PARIZQ expression PARDER statement ELSE statement','selection_statement',7,'p_selection_statement','AnalizadorParserCopy.py',159),
  ('return-statement -> RETURN PTCOMA','return-statement',2,'p_return_statement','AnalizadorParserCopy.py',169),
  ('return-statement -> RETURN expression PTCOMA','return-statement',3,'p_return_statement','AnalizadorParserCopy.py',170),
  ('expression -> expression IGUALQUE expression','expression',3,'p_expression','AnalizadorParserCopy.py',180),
  ('expression -> expression MENQUE expression','expression',3,'p_expression','AnalizadorParserCopy.py',181),
  ('expression -> expression MAYQUE expression','expression',3,'p_expression','AnalizadorParserCopy.py',182),
  ('expression -> expression AND expression','expression',3,'p_expression','AnalizadorParserCopy.py',183),
  ('expression -> expression OR expression','expression',3,'p_expression','AnalizadorParserCopy.py',184),
  ('expression -> assignment','expression',1,'p_expression','AnalizadorParserCopy.py',185),
  ('empty -> <empty>','empty',0,'p_empty','AnalizadorParserCopy.py',194),
]
