Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     empty -> <empty>
Rule 4     instrucciones -> instruccion
Rule 5     instruccion -> imprimir_instr
Rule 6     instruccion -> definicion_instr
Rule 7     instruccion -> asignacion_instr
Rule 8     instruccion -> mientras_instr
Rule 9     instruccion -> if_instr
Rule 10    instruccion -> if_else_instr
Rule 11    instruccion -> for_instr
Rule 12    instruccion -> for_asign
Rule 13    instruccion -> function
Rule 14    instruccion -> argument_list
Rule 15    instruccion -> argument
Rule 16    instruccion -> empty
Rule 17    instruccion -> do_mientras_instr
Rule 18    imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA
Rule 19    definicion_instr -> NUMERO ID PTCOMA
Rule 20    asignacion_instr -> ID IGUAL expresion_numerica PTCOMA
Rule 21    mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
Rule 22    do_mientras_instr -> DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER
Rule 23    for_asign -> ID IGUAL expresion_numerica
Rule 24    for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER
Rule 25    function_call -> ID PARIZQ PARDER
Rule 26    function_call -> ID PARIZQ expresion_numerica COMA expresion_numerica PARDER
Rule 27    argument_list -> argument_list COMA argument
Rule 28    argument_list -> argument
Rule 29    argument_list -> empty
Rule 30    argument -> ID
Rule 31    function -> DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER
Rule 32    return-statement -> RETURN PTCOMA
Rule 33    return-statement -> RETURN expresion_numerica PTCOMA
Rule 34    if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
Rule 35    if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
Rule 36    expresion_numerica -> expresion_numerica MAS expresion_numerica
Rule 37    expresion_numerica -> expresion_numerica MENOS expresion_numerica
Rule 38    expresion_numerica -> expresion_numerica POR expresion_numerica
Rule 39    expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica
Rule 40    expresion_numerica -> MENOS expresion_numerica
Rule 41    expresion_numerica -> PARIZQ expresion_numerica PARDER
Rule 42    expresion_numerica -> ENTERO
Rule 43    expresion_numerica -> DECIMAL
Rule 44    expresion_numerica -> ID
Rule 45    expresion_cadena -> expresion_cadena CONCAT expresion_cadena
Rule 46    expresion_cadena -> CADENA
Rule 47    expresion_cadena -> expresion_numerica
Rule 48    expresion_logica -> expresion_numerica MAYQUE expresion_numerica
Rule 49    expresion_logica -> expresion_numerica MENQUE expresion_numerica
Rule 50    expresion_logica -> expresion_numerica IGUALQUE expresion_numerica
Rule 51    expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica
Rule 52    expresion_logica -> expresion_numerica MAYIGUAL expresion_numerica
Rule 53    expresion_logica -> expresion_numerica MENIGUAL expresion_numerica

Terminals, with rules where they appear

CADENA               : 46
COMA                 : 26 27
CONCAT               : 45
DECIMAL              : 43
DEF                  : 31
DIVIDIDO             : 39
DO                   : 22
ELSE                 : 35
ENTERO               : 42
FOR                  : 24
ID                   : 19 20 23 25 26 30 31 44
IF                   : 34 35
IGUAL                : 20 23
IGUALQUE             : 50
IMPRIMIR             : 18
LLAVDER              : 21 22 24 31 34 35 35
LLAVIZQ              : 21 22 24 31 34 35 35
MAS                  : 36
MAYIGUAL             : 52
MAYQUE               : 48
MENIGUAL             : 53
MENOS                : 37 40
MENQUE               : 49
MIENTRAS             : 21 22
NIGUALQUE            : 51
NUMERO               : 19
PARDER               : 18 21 22 24 25 26 31 34 35 41
PARIZQ               : 18 21 22 24 25 26 31 34 35 41
POR                  : 38
PTCOMA               : 18 19 20 32 33
PTCOMACERRADO        : 24 24
RETURN               : 32 33
error                : 

Nonterminals, with rules where they appear

argument             : 15 27 28
argument_list        : 14 27 31
asignacion_instr     : 7
definicion_instr     : 6
do_mientras_instr    : 17
empty                : 16 29
expresion_cadena     : 18 45 45
expresion_logica     : 21 22 24 34 35
expresion_numerica   : 20 23 26 26 33 36 36 37 37 38 38 39 39 40 41 47 48 48 49 49 50 50 51 51 52 52 53 53
for_asign            : 12 24 24
for_instr            : 11
function             : 13
function_call        : 
if_else_instr        : 10
if_instr             : 9
imprimir_instr       : 5
init                 : 0
instruccion          : 2 4
instrucciones        : 1 2 21 22 24 31 34 35 35
mientras_instr       : 8
return-statement     : 

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (4) instrucciones -> . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . mientras_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) instruccion -> . for_instr
    (12) instruccion -> . for_asign
    (13) instruccion -> . function
    (14) instruccion -> . argument_list
    (15) instruccion -> . argument
    (16) instruccion -> . empty
    (17) instruccion -> . do_mientras_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA
    (19) definicion_instr -> . NUMERO ID PTCOMA
    (20) asignacion_instr -> . ID IGUAL expresion_numerica PTCOMA
    (21) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (24) for_instr -> . FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER
    (23) for_asign -> . ID IGUAL expresion_numerica
    (31) function -> . DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER
    (27) argument_list -> . argument_list COMA argument
    (28) argument_list -> . argument
    (29) argument_list -> . empty
    (30) argument -> . ID
    (3) empty -> .
    (22) do_mientras_instr -> . DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER

  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IMPRIMIR        shift and go to state 17
    NUMERO          shift and go to state 18
    ID              shift and go to state 19
    MIENTRAS        shift and go to state 20
    IF              shift and go to state 21
    FOR             shift and go to state 22
    DEF             shift and go to state 23
    COMA            reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    DO              shift and go to state 24

  ! IMPRIMIR        [ reduce using rule 3 (empty -> .) ]
  ! NUMERO          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! FOR             [ reduce using rule 3 (empty -> .) ]
  ! DEF             [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    for_instr                      shift and go to state 10
    for_asign                      shift and go to state 11
    function                       shift and go to state 12
    argument_list                  shift and go to state 13
    argument                       shift and go to state 14
    empty                          shift and go to state 15
    do_mientras_instr              shift and go to state 16

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . mientras_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) instruccion -> . for_instr
    (12) instruccion -> . for_asign
    (13) instruccion -> . function
    (14) instruccion -> . argument_list
    (15) instruccion -> . argument
    (16) instruccion -> . empty
    (17) instruccion -> . do_mientras_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA
    (19) definicion_instr -> . NUMERO ID PTCOMA
    (20) asignacion_instr -> . ID IGUAL expresion_numerica PTCOMA
    (21) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (24) for_instr -> . FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER
    (23) for_asign -> . ID IGUAL expresion_numerica
    (31) function -> . DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER
    (27) argument_list -> . argument_list COMA argument
    (28) argument_list -> . argument
    (29) argument_list -> . empty
    (30) argument -> . ID
    (3) empty -> .
    (22) do_mientras_instr -> . DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER

  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (init -> instrucciones .)
  ! shift/reduce conflict for DO resolved as shift
    $end            reduce using rule 1 (init -> instrucciones .)
    IMPRIMIR        shift and go to state 17
    NUMERO          shift and go to state 18
    ID              shift and go to state 19
    MIENTRAS        shift and go to state 20
    IF              shift and go to state 21
    FOR             shift and go to state 22
    DEF             shift and go to state 23
    COMA            reduce using rule 3 (empty -> .)
    DO              shift and go to state 24

  ! IMPRIMIR        [ reduce using rule 3 (empty -> .) ]
  ! NUMERO          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! FOR             [ reduce using rule 3 (empty -> .) ]
  ! DEF             [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]
  ! $end            [ reduce using rule 3 (empty -> .) ]

    instruccion                    shift and go to state 25
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    for_instr                      shift and go to state 10
    for_asign                      shift and go to state 11
    function                       shift and go to state 12
    argument_list                  shift and go to state 13
    argument                       shift and go to state 14
    empty                          shift and go to state 15
    do_mientras_instr              shift and go to state 16

state 3

    (4) instrucciones -> instruccion .

    IMPRIMIR        reduce using rule 4 (instrucciones -> instruccion .)
    NUMERO          reduce using rule 4 (instrucciones -> instruccion .)
    ID              reduce using rule 4 (instrucciones -> instruccion .)
    MIENTRAS        reduce using rule 4 (instrucciones -> instruccion .)
    IF              reduce using rule 4 (instrucciones -> instruccion .)
    FOR             reduce using rule 4 (instrucciones -> instruccion .)
    DEF             reduce using rule 4 (instrucciones -> instruccion .)
    DO              reduce using rule 4 (instrucciones -> instruccion .)
    COMA            reduce using rule 4 (instrucciones -> instruccion .)
    $end            reduce using rule 4 (instrucciones -> instruccion .)
    LLAVDER         reduce using rule 4 (instrucciones -> instruccion .)


state 4

    (5) instruccion -> imprimir_instr .

    IMPRIMIR        reduce using rule 5 (instruccion -> imprimir_instr .)
    NUMERO          reduce using rule 5 (instruccion -> imprimir_instr .)
    ID              reduce using rule 5 (instruccion -> imprimir_instr .)
    MIENTRAS        reduce using rule 5 (instruccion -> imprimir_instr .)
    IF              reduce using rule 5 (instruccion -> imprimir_instr .)
    FOR             reduce using rule 5 (instruccion -> imprimir_instr .)
    DEF             reduce using rule 5 (instruccion -> imprimir_instr .)
    DO              reduce using rule 5 (instruccion -> imprimir_instr .)
    COMA            reduce using rule 5 (instruccion -> imprimir_instr .)
    $end            reduce using rule 5 (instruccion -> imprimir_instr .)
    LLAVDER         reduce using rule 5 (instruccion -> imprimir_instr .)


state 5

    (6) instruccion -> definicion_instr .

    IMPRIMIR        reduce using rule 6 (instruccion -> definicion_instr .)
    NUMERO          reduce using rule 6 (instruccion -> definicion_instr .)
    ID              reduce using rule 6 (instruccion -> definicion_instr .)
    MIENTRAS        reduce using rule 6 (instruccion -> definicion_instr .)
    IF              reduce using rule 6 (instruccion -> definicion_instr .)
    FOR             reduce using rule 6 (instruccion -> definicion_instr .)
    DEF             reduce using rule 6 (instruccion -> definicion_instr .)
    DO              reduce using rule 6 (instruccion -> definicion_instr .)
    COMA            reduce using rule 6 (instruccion -> definicion_instr .)
    $end            reduce using rule 6 (instruccion -> definicion_instr .)
    LLAVDER         reduce using rule 6 (instruccion -> definicion_instr .)


state 6

    (7) instruccion -> asignacion_instr .

    IMPRIMIR        reduce using rule 7 (instruccion -> asignacion_instr .)
    NUMERO          reduce using rule 7 (instruccion -> asignacion_instr .)
    ID              reduce using rule 7 (instruccion -> asignacion_instr .)
    MIENTRAS        reduce using rule 7 (instruccion -> asignacion_instr .)
    IF              reduce using rule 7 (instruccion -> asignacion_instr .)
    FOR             reduce using rule 7 (instruccion -> asignacion_instr .)
    DEF             reduce using rule 7 (instruccion -> asignacion_instr .)
    DO              reduce using rule 7 (instruccion -> asignacion_instr .)
    COMA            reduce using rule 7 (instruccion -> asignacion_instr .)
    $end            reduce using rule 7 (instruccion -> asignacion_instr .)
    LLAVDER         reduce using rule 7 (instruccion -> asignacion_instr .)


state 7

    (8) instruccion -> mientras_instr .

    IMPRIMIR        reduce using rule 8 (instruccion -> mientras_instr .)
    NUMERO          reduce using rule 8 (instruccion -> mientras_instr .)
    ID              reduce using rule 8 (instruccion -> mientras_instr .)
    MIENTRAS        reduce using rule 8 (instruccion -> mientras_instr .)
    IF              reduce using rule 8 (instruccion -> mientras_instr .)
    FOR             reduce using rule 8 (instruccion -> mientras_instr .)
    DEF             reduce using rule 8 (instruccion -> mientras_instr .)
    DO              reduce using rule 8 (instruccion -> mientras_instr .)
    COMA            reduce using rule 8 (instruccion -> mientras_instr .)
    $end            reduce using rule 8 (instruccion -> mientras_instr .)
    LLAVDER         reduce using rule 8 (instruccion -> mientras_instr .)


state 8

    (9) instruccion -> if_instr .

    IMPRIMIR        reduce using rule 9 (instruccion -> if_instr .)
    NUMERO          reduce using rule 9 (instruccion -> if_instr .)
    ID              reduce using rule 9 (instruccion -> if_instr .)
    MIENTRAS        reduce using rule 9 (instruccion -> if_instr .)
    IF              reduce using rule 9 (instruccion -> if_instr .)
    FOR             reduce using rule 9 (instruccion -> if_instr .)
    DEF             reduce using rule 9 (instruccion -> if_instr .)
    DO              reduce using rule 9 (instruccion -> if_instr .)
    COMA            reduce using rule 9 (instruccion -> if_instr .)
    $end            reduce using rule 9 (instruccion -> if_instr .)
    LLAVDER         reduce using rule 9 (instruccion -> if_instr .)


state 9

    (10) instruccion -> if_else_instr .

    IMPRIMIR        reduce using rule 10 (instruccion -> if_else_instr .)
    NUMERO          reduce using rule 10 (instruccion -> if_else_instr .)
    ID              reduce using rule 10 (instruccion -> if_else_instr .)
    MIENTRAS        reduce using rule 10 (instruccion -> if_else_instr .)
    IF              reduce using rule 10 (instruccion -> if_else_instr .)
    FOR             reduce using rule 10 (instruccion -> if_else_instr .)
    DEF             reduce using rule 10 (instruccion -> if_else_instr .)
    DO              reduce using rule 10 (instruccion -> if_else_instr .)
    COMA            reduce using rule 10 (instruccion -> if_else_instr .)
    $end            reduce using rule 10 (instruccion -> if_else_instr .)
    LLAVDER         reduce using rule 10 (instruccion -> if_else_instr .)


state 10

    (11) instruccion -> for_instr .

    IMPRIMIR        reduce using rule 11 (instruccion -> for_instr .)
    NUMERO          reduce using rule 11 (instruccion -> for_instr .)
    ID              reduce using rule 11 (instruccion -> for_instr .)
    MIENTRAS        reduce using rule 11 (instruccion -> for_instr .)
    IF              reduce using rule 11 (instruccion -> for_instr .)
    FOR             reduce using rule 11 (instruccion -> for_instr .)
    DEF             reduce using rule 11 (instruccion -> for_instr .)
    DO              reduce using rule 11 (instruccion -> for_instr .)
    COMA            reduce using rule 11 (instruccion -> for_instr .)
    $end            reduce using rule 11 (instruccion -> for_instr .)
    LLAVDER         reduce using rule 11 (instruccion -> for_instr .)


state 11

    (12) instruccion -> for_asign .

    IMPRIMIR        reduce using rule 12 (instruccion -> for_asign .)
    NUMERO          reduce using rule 12 (instruccion -> for_asign .)
    ID              reduce using rule 12 (instruccion -> for_asign .)
    MIENTRAS        reduce using rule 12 (instruccion -> for_asign .)
    IF              reduce using rule 12 (instruccion -> for_asign .)
    FOR             reduce using rule 12 (instruccion -> for_asign .)
    DEF             reduce using rule 12 (instruccion -> for_asign .)
    DO              reduce using rule 12 (instruccion -> for_asign .)
    COMA            reduce using rule 12 (instruccion -> for_asign .)
    $end            reduce using rule 12 (instruccion -> for_asign .)
    LLAVDER         reduce using rule 12 (instruccion -> for_asign .)


state 12

    (13) instruccion -> function .

    IMPRIMIR        reduce using rule 13 (instruccion -> function .)
    NUMERO          reduce using rule 13 (instruccion -> function .)
    ID              reduce using rule 13 (instruccion -> function .)
    MIENTRAS        reduce using rule 13 (instruccion -> function .)
    IF              reduce using rule 13 (instruccion -> function .)
    FOR             reduce using rule 13 (instruccion -> function .)
    DEF             reduce using rule 13 (instruccion -> function .)
    DO              reduce using rule 13 (instruccion -> function .)
    COMA            reduce using rule 13 (instruccion -> function .)
    $end            reduce using rule 13 (instruccion -> function .)
    LLAVDER         reduce using rule 13 (instruccion -> function .)


state 13

    (14) instruccion -> argument_list .
    (27) argument_list -> argument_list . COMA argument

  ! shift/reduce conflict for COMA resolved as shift
    IMPRIMIR        reduce using rule 14 (instruccion -> argument_list .)
    NUMERO          reduce using rule 14 (instruccion -> argument_list .)
    ID              reduce using rule 14 (instruccion -> argument_list .)
    MIENTRAS        reduce using rule 14 (instruccion -> argument_list .)
    IF              reduce using rule 14 (instruccion -> argument_list .)
    FOR             reduce using rule 14 (instruccion -> argument_list .)
    DEF             reduce using rule 14 (instruccion -> argument_list .)
    DO              reduce using rule 14 (instruccion -> argument_list .)
    $end            reduce using rule 14 (instruccion -> argument_list .)
    LLAVDER         reduce using rule 14 (instruccion -> argument_list .)
    COMA            shift and go to state 26

  ! COMA            [ reduce using rule 14 (instruccion -> argument_list .) ]


state 14

    (15) instruccion -> argument .
    (28) argument_list -> argument .

  ! reduce/reduce conflict for COMA resolved using rule 15 (instruccion -> argument .)
  ! reduce/reduce conflict for IMPRIMIR resolved using rule 15 (instruccion -> argument .)
  ! reduce/reduce conflict for NUMERO resolved using rule 15 (instruccion -> argument .)
  ! reduce/reduce conflict for ID resolved using rule 15 (instruccion -> argument .)
  ! reduce/reduce conflict for MIENTRAS resolved using rule 15 (instruccion -> argument .)
  ! reduce/reduce conflict for IF resolved using rule 15 (instruccion -> argument .)
  ! reduce/reduce conflict for FOR resolved using rule 15 (instruccion -> argument .)
  ! reduce/reduce conflict for DEF resolved using rule 15 (instruccion -> argument .)
  ! reduce/reduce conflict for DO resolved using rule 15 (instruccion -> argument .)
  ! reduce/reduce conflict for $end resolved using rule 15 (instruccion -> argument .)
  ! reduce/reduce conflict for LLAVDER resolved using rule 15 (instruccion -> argument .)
    IMPRIMIR        reduce using rule 15 (instruccion -> argument .)
    NUMERO          reduce using rule 15 (instruccion -> argument .)
    ID              reduce using rule 15 (instruccion -> argument .)
    MIENTRAS        reduce using rule 15 (instruccion -> argument .)
    IF              reduce using rule 15 (instruccion -> argument .)
    FOR             reduce using rule 15 (instruccion -> argument .)
    DEF             reduce using rule 15 (instruccion -> argument .)
    DO              reduce using rule 15 (instruccion -> argument .)
    COMA            reduce using rule 15 (instruccion -> argument .)
    $end            reduce using rule 15 (instruccion -> argument .)
    LLAVDER         reduce using rule 15 (instruccion -> argument .)

  ! COMA            [ reduce using rule 28 (argument_list -> argument .) ]
  ! IMPRIMIR        [ reduce using rule 28 (argument_list -> argument .) ]
  ! NUMERO          [ reduce using rule 28 (argument_list -> argument .) ]
  ! ID              [ reduce using rule 28 (argument_list -> argument .) ]
  ! MIENTRAS        [ reduce using rule 28 (argument_list -> argument .) ]
  ! IF              [ reduce using rule 28 (argument_list -> argument .) ]
  ! FOR             [ reduce using rule 28 (argument_list -> argument .) ]
  ! DEF             [ reduce using rule 28 (argument_list -> argument .) ]
  ! DO              [ reduce using rule 28 (argument_list -> argument .) ]
  ! $end            [ reduce using rule 28 (argument_list -> argument .) ]
  ! LLAVDER         [ reduce using rule 28 (argument_list -> argument .) ]


state 15

    (16) instruccion -> empty .
    (29) argument_list -> empty .

  ! reduce/reduce conflict for COMA resolved using rule 16 (instruccion -> empty .)
  ! reduce/reduce conflict for IMPRIMIR resolved using rule 16 (instruccion -> empty .)
  ! reduce/reduce conflict for NUMERO resolved using rule 16 (instruccion -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 16 (instruccion -> empty .)
  ! reduce/reduce conflict for MIENTRAS resolved using rule 16 (instruccion -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 16 (instruccion -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 16 (instruccion -> empty .)
  ! reduce/reduce conflict for DEF resolved using rule 16 (instruccion -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 16 (instruccion -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 16 (instruccion -> empty .)
  ! reduce/reduce conflict for LLAVDER resolved using rule 16 (instruccion -> empty .)
    IMPRIMIR        reduce using rule 16 (instruccion -> empty .)
    NUMERO          reduce using rule 16 (instruccion -> empty .)
    ID              reduce using rule 16 (instruccion -> empty .)
    MIENTRAS        reduce using rule 16 (instruccion -> empty .)
    IF              reduce using rule 16 (instruccion -> empty .)
    FOR             reduce using rule 16 (instruccion -> empty .)
    DEF             reduce using rule 16 (instruccion -> empty .)
    DO              reduce using rule 16 (instruccion -> empty .)
    COMA            reduce using rule 16 (instruccion -> empty .)
    $end            reduce using rule 16 (instruccion -> empty .)
    LLAVDER         reduce using rule 16 (instruccion -> empty .)

  ! COMA            [ reduce using rule 29 (argument_list -> empty .) ]
  ! IMPRIMIR        [ reduce using rule 29 (argument_list -> empty .) ]
  ! NUMERO          [ reduce using rule 29 (argument_list -> empty .) ]
  ! ID              [ reduce using rule 29 (argument_list -> empty .) ]
  ! MIENTRAS        [ reduce using rule 29 (argument_list -> empty .) ]
  ! IF              [ reduce using rule 29 (argument_list -> empty .) ]
  ! FOR             [ reduce using rule 29 (argument_list -> empty .) ]
  ! DEF             [ reduce using rule 29 (argument_list -> empty .) ]
  ! DO              [ reduce using rule 29 (argument_list -> empty .) ]
  ! $end            [ reduce using rule 29 (argument_list -> empty .) ]
  ! LLAVDER         [ reduce using rule 29 (argument_list -> empty .) ]


state 16

    (17) instruccion -> do_mientras_instr .

    IMPRIMIR        reduce using rule 17 (instruccion -> do_mientras_instr .)
    NUMERO          reduce using rule 17 (instruccion -> do_mientras_instr .)
    ID              reduce using rule 17 (instruccion -> do_mientras_instr .)
    MIENTRAS        reduce using rule 17 (instruccion -> do_mientras_instr .)
    IF              reduce using rule 17 (instruccion -> do_mientras_instr .)
    FOR             reduce using rule 17 (instruccion -> do_mientras_instr .)
    DEF             reduce using rule 17 (instruccion -> do_mientras_instr .)
    DO              reduce using rule 17 (instruccion -> do_mientras_instr .)
    COMA            reduce using rule 17 (instruccion -> do_mientras_instr .)
    $end            reduce using rule 17 (instruccion -> do_mientras_instr .)
    LLAVDER         reduce using rule 17 (instruccion -> do_mientras_instr .)


state 17

    (18) imprimir_instr -> IMPRIMIR . PARIZQ expresion_cadena PARDER PTCOMA

    PARIZQ          shift and go to state 27


state 18

    (19) definicion_instr -> NUMERO . ID PTCOMA

    ID              shift and go to state 28


state 19

    (20) asignacion_instr -> ID . IGUAL expresion_numerica PTCOMA
    (23) for_asign -> ID . IGUAL expresion_numerica
    (30) argument -> ID .

    IGUAL           shift and go to state 29
    IMPRIMIR        reduce using rule 30 (argument -> ID .)
    NUMERO          reduce using rule 30 (argument -> ID .)
    ID              reduce using rule 30 (argument -> ID .)
    MIENTRAS        reduce using rule 30 (argument -> ID .)
    IF              reduce using rule 30 (argument -> ID .)
    FOR             reduce using rule 30 (argument -> ID .)
    DEF             reduce using rule 30 (argument -> ID .)
    DO              reduce using rule 30 (argument -> ID .)
    COMA            reduce using rule 30 (argument -> ID .)
    $end            reduce using rule 30 (argument -> ID .)
    LLAVDER         reduce using rule 30 (argument -> ID .)


state 20

    (21) mientras_instr -> MIENTRAS . PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 30


state 21

    (34) if_instr -> IF . PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> IF . PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 31


state 22

    (24) for_instr -> FOR . PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 32


state 23

    (31) function -> DEF . ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER

    ID              shift and go to state 33


state 24

    (22) do_mientras_instr -> DO . LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER

    LLAVIZQ         shift and go to state 34


state 25

    (2) instrucciones -> instrucciones instruccion .

    IMPRIMIR        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    NUMERO          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    MIENTRAS        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    DEF             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    DO              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    COMA            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LLAVDER         reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 26

    (27) argument_list -> argument_list COMA . argument
    (30) argument -> . ID

    ID              shift and go to state 36

    argument                       shift and go to state 35

state 27

    (18) imprimir_instr -> IMPRIMIR PARIZQ . expresion_cadena PARDER PTCOMA
    (45) expresion_cadena -> . expresion_cadena CONCAT expresion_cadena
    (46) expresion_cadena -> . CADENA
    (47) expresion_cadena -> . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    CADENA          shift and go to state 39
    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_cadena               shift and go to state 38
    expresion_numerica             shift and go to state 40

state 28

    (19) definicion_instr -> NUMERO ID . PTCOMA

    PTCOMA          shift and go to state 45


state 29

    (20) asignacion_instr -> ID IGUAL . expresion_numerica PTCOMA
    (23) for_asign -> ID IGUAL . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_numerica             shift and go to state 46

state 30

    (21) mientras_instr -> MIENTRAS PARIZQ . expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (48) expresion_logica -> . expresion_numerica MAYQUE expresion_numerica
    (49) expresion_logica -> . expresion_numerica MENQUE expresion_numerica
    (50) expresion_logica -> . expresion_numerica IGUALQUE expresion_numerica
    (51) expresion_logica -> . expresion_numerica NIGUALQUE expresion_numerica
    (52) expresion_logica -> . expresion_numerica MAYIGUAL expresion_numerica
    (53) expresion_logica -> . expresion_numerica MENIGUAL expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_logica               shift and go to state 47
    expresion_numerica             shift and go to state 48

state 31

    (34) if_instr -> IF PARIZQ . expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> IF PARIZQ . expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (48) expresion_logica -> . expresion_numerica MAYQUE expresion_numerica
    (49) expresion_logica -> . expresion_numerica MENQUE expresion_numerica
    (50) expresion_logica -> . expresion_numerica IGUALQUE expresion_numerica
    (51) expresion_logica -> . expresion_numerica NIGUALQUE expresion_numerica
    (52) expresion_logica -> . expresion_numerica MAYIGUAL expresion_numerica
    (53) expresion_logica -> . expresion_numerica MENIGUAL expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_logica               shift and go to state 49
    expresion_numerica             shift and go to state 48

state 32

    (24) for_instr -> FOR PARIZQ . for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER
    (23) for_asign -> . ID IGUAL expresion_numerica

    ID              shift and go to state 51

    for_asign                      shift and go to state 50

state 33

    (31) function -> DEF ID . PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 52


state 34

    (22) do_mientras_instr -> DO LLAVIZQ . instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER
    (2) instrucciones -> . instrucciones instruccion
    (4) instrucciones -> . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . mientras_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) instruccion -> . for_instr
    (12) instruccion -> . for_asign
    (13) instruccion -> . function
    (14) instruccion -> . argument_list
    (15) instruccion -> . argument
    (16) instruccion -> . empty
    (17) instruccion -> . do_mientras_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA
    (19) definicion_instr -> . NUMERO ID PTCOMA
    (20) asignacion_instr -> . ID IGUAL expresion_numerica PTCOMA
    (21) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (24) for_instr -> . FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER
    (23) for_asign -> . ID IGUAL expresion_numerica
    (31) function -> . DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER
    (27) argument_list -> . argument_list COMA argument
    (28) argument_list -> . argument
    (29) argument_list -> . empty
    (30) argument -> . ID
    (3) empty -> .
    (22) do_mientras_instr -> . DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER

  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IMPRIMIR        shift and go to state 17
    NUMERO          shift and go to state 18
    ID              shift and go to state 19
    MIENTRAS        shift and go to state 20
    IF              shift and go to state 21
    FOR             shift and go to state 22
    DEF             shift and go to state 23
    LLAVDER         reduce using rule 3 (empty -> .)
    COMA            reduce using rule 3 (empty -> .)
    DO              shift and go to state 24

  ! IMPRIMIR        [ reduce using rule 3 (empty -> .) ]
  ! NUMERO          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! FOR             [ reduce using rule 3 (empty -> .) ]
  ! DEF             [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]

    instrucciones                  shift and go to state 53
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    for_instr                      shift and go to state 10
    for_asign                      shift and go to state 11
    function                       shift and go to state 12
    argument_list                  shift and go to state 13
    argument                       shift and go to state 14
    empty                          shift and go to state 15
    do_mientras_instr              shift and go to state 16

state 35

    (27) argument_list -> argument_list COMA argument .

    COMA            reduce using rule 27 (argument_list -> argument_list COMA argument .)
    IMPRIMIR        reduce using rule 27 (argument_list -> argument_list COMA argument .)
    NUMERO          reduce using rule 27 (argument_list -> argument_list COMA argument .)
    ID              reduce using rule 27 (argument_list -> argument_list COMA argument .)
    MIENTRAS        reduce using rule 27 (argument_list -> argument_list COMA argument .)
    IF              reduce using rule 27 (argument_list -> argument_list COMA argument .)
    FOR             reduce using rule 27 (argument_list -> argument_list COMA argument .)
    DEF             reduce using rule 27 (argument_list -> argument_list COMA argument .)
    DO              reduce using rule 27 (argument_list -> argument_list COMA argument .)
    $end            reduce using rule 27 (argument_list -> argument_list COMA argument .)
    LLAVDER         reduce using rule 27 (argument_list -> argument_list COMA argument .)
    PARDER          reduce using rule 27 (argument_list -> argument_list COMA argument .)


state 36

    (30) argument -> ID .

    COMA            reduce using rule 30 (argument -> ID .)
    IMPRIMIR        reduce using rule 30 (argument -> ID .)
    NUMERO          reduce using rule 30 (argument -> ID .)
    ID              reduce using rule 30 (argument -> ID .)
    MIENTRAS        reduce using rule 30 (argument -> ID .)
    IF              reduce using rule 30 (argument -> ID .)
    FOR             reduce using rule 30 (argument -> ID .)
    DEF             reduce using rule 30 (argument -> ID .)
    DO              reduce using rule 30 (argument -> ID .)
    $end            reduce using rule 30 (argument -> ID .)
    LLAVDER         reduce using rule 30 (argument -> ID .)
    PARDER          reduce using rule 30 (argument -> ID .)


state 37

    (41) expresion_numerica -> PARIZQ . expresion_numerica PARDER
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_numerica             shift and go to state 54

state 38

    (18) imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena . PARDER PTCOMA
    (45) expresion_cadena -> expresion_cadena . CONCAT expresion_cadena

    PARDER          shift and go to state 55
    CONCAT          shift and go to state 56


state 39

    (46) expresion_cadena -> CADENA .

    PARDER          reduce using rule 46 (expresion_cadena -> CADENA .)
    CONCAT          reduce using rule 46 (expresion_cadena -> CADENA .)


state 40

    (47) expresion_cadena -> expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          reduce using rule 47 (expresion_cadena -> expresion_numerica .)
    CONCAT          reduce using rule 47 (expresion_cadena -> expresion_numerica .)
    MAS             shift and go to state 57
    MENOS           shift and go to state 58
    POR             shift and go to state 59
    DIVIDIDO        shift and go to state 60


state 41

    (40) expresion_numerica -> MENOS . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_numerica             shift and go to state 61

state 42

    (42) expresion_numerica -> ENTERO .

    MAS             reduce using rule 42 (expresion_numerica -> ENTERO .)
    MENOS           reduce using rule 42 (expresion_numerica -> ENTERO .)
    POR             reduce using rule 42 (expresion_numerica -> ENTERO .)
    DIVIDIDO        reduce using rule 42 (expresion_numerica -> ENTERO .)
    PARDER          reduce using rule 42 (expresion_numerica -> ENTERO .)
    CONCAT          reduce using rule 42 (expresion_numerica -> ENTERO .)
    PTCOMA          reduce using rule 42 (expresion_numerica -> ENTERO .)
    IMPRIMIR        reduce using rule 42 (expresion_numerica -> ENTERO .)
    NUMERO          reduce using rule 42 (expresion_numerica -> ENTERO .)
    ID              reduce using rule 42 (expresion_numerica -> ENTERO .)
    MIENTRAS        reduce using rule 42 (expresion_numerica -> ENTERO .)
    IF              reduce using rule 42 (expresion_numerica -> ENTERO .)
    FOR             reduce using rule 42 (expresion_numerica -> ENTERO .)
    DEF             reduce using rule 42 (expresion_numerica -> ENTERO .)
    DO              reduce using rule 42 (expresion_numerica -> ENTERO .)
    COMA            reduce using rule 42 (expresion_numerica -> ENTERO .)
    $end            reduce using rule 42 (expresion_numerica -> ENTERO .)
    LLAVDER         reduce using rule 42 (expresion_numerica -> ENTERO .)
    MAYQUE          reduce using rule 42 (expresion_numerica -> ENTERO .)
    MENQUE          reduce using rule 42 (expresion_numerica -> ENTERO .)
    IGUALQUE        reduce using rule 42 (expresion_numerica -> ENTERO .)
    NIGUALQUE       reduce using rule 42 (expresion_numerica -> ENTERO .)
    MAYIGUAL        reduce using rule 42 (expresion_numerica -> ENTERO .)
    MENIGUAL        reduce using rule 42 (expresion_numerica -> ENTERO .)
    PTCOMACERRADO   reduce using rule 42 (expresion_numerica -> ENTERO .)


state 43

    (43) expresion_numerica -> DECIMAL .

    MAS             reduce using rule 43 (expresion_numerica -> DECIMAL .)
    MENOS           reduce using rule 43 (expresion_numerica -> DECIMAL .)
    POR             reduce using rule 43 (expresion_numerica -> DECIMAL .)
    DIVIDIDO        reduce using rule 43 (expresion_numerica -> DECIMAL .)
    PARDER          reduce using rule 43 (expresion_numerica -> DECIMAL .)
    CONCAT          reduce using rule 43 (expresion_numerica -> DECIMAL .)
    PTCOMA          reduce using rule 43 (expresion_numerica -> DECIMAL .)
    IMPRIMIR        reduce using rule 43 (expresion_numerica -> DECIMAL .)
    NUMERO          reduce using rule 43 (expresion_numerica -> DECIMAL .)
    ID              reduce using rule 43 (expresion_numerica -> DECIMAL .)
    MIENTRAS        reduce using rule 43 (expresion_numerica -> DECIMAL .)
    IF              reduce using rule 43 (expresion_numerica -> DECIMAL .)
    FOR             reduce using rule 43 (expresion_numerica -> DECIMAL .)
    DEF             reduce using rule 43 (expresion_numerica -> DECIMAL .)
    DO              reduce using rule 43 (expresion_numerica -> DECIMAL .)
    COMA            reduce using rule 43 (expresion_numerica -> DECIMAL .)
    $end            reduce using rule 43 (expresion_numerica -> DECIMAL .)
    LLAVDER         reduce using rule 43 (expresion_numerica -> DECIMAL .)
    MAYQUE          reduce using rule 43 (expresion_numerica -> DECIMAL .)
    MENQUE          reduce using rule 43 (expresion_numerica -> DECIMAL .)
    IGUALQUE        reduce using rule 43 (expresion_numerica -> DECIMAL .)
    NIGUALQUE       reduce using rule 43 (expresion_numerica -> DECIMAL .)
    MAYIGUAL        reduce using rule 43 (expresion_numerica -> DECIMAL .)
    MENIGUAL        reduce using rule 43 (expresion_numerica -> DECIMAL .)
    PTCOMACERRADO   reduce using rule 43 (expresion_numerica -> DECIMAL .)


state 44

    (44) expresion_numerica -> ID .

    MAS             reduce using rule 44 (expresion_numerica -> ID .)
    MENOS           reduce using rule 44 (expresion_numerica -> ID .)
    POR             reduce using rule 44 (expresion_numerica -> ID .)
    DIVIDIDO        reduce using rule 44 (expresion_numerica -> ID .)
    PARDER          reduce using rule 44 (expresion_numerica -> ID .)
    CONCAT          reduce using rule 44 (expresion_numerica -> ID .)
    PTCOMA          reduce using rule 44 (expresion_numerica -> ID .)
    IMPRIMIR        reduce using rule 44 (expresion_numerica -> ID .)
    NUMERO          reduce using rule 44 (expresion_numerica -> ID .)
    ID              reduce using rule 44 (expresion_numerica -> ID .)
    MIENTRAS        reduce using rule 44 (expresion_numerica -> ID .)
    IF              reduce using rule 44 (expresion_numerica -> ID .)
    FOR             reduce using rule 44 (expresion_numerica -> ID .)
    DEF             reduce using rule 44 (expresion_numerica -> ID .)
    DO              reduce using rule 44 (expresion_numerica -> ID .)
    COMA            reduce using rule 44 (expresion_numerica -> ID .)
    $end            reduce using rule 44 (expresion_numerica -> ID .)
    LLAVDER         reduce using rule 44 (expresion_numerica -> ID .)
    MAYQUE          reduce using rule 44 (expresion_numerica -> ID .)
    MENQUE          reduce using rule 44 (expresion_numerica -> ID .)
    IGUALQUE        reduce using rule 44 (expresion_numerica -> ID .)
    NIGUALQUE       reduce using rule 44 (expresion_numerica -> ID .)
    MAYIGUAL        reduce using rule 44 (expresion_numerica -> ID .)
    MENIGUAL        reduce using rule 44 (expresion_numerica -> ID .)
    PTCOMACERRADO   reduce using rule 44 (expresion_numerica -> ID .)


state 45

    (19) definicion_instr -> NUMERO ID PTCOMA .

    IMPRIMIR        reduce using rule 19 (definicion_instr -> NUMERO ID PTCOMA .)
    NUMERO          reduce using rule 19 (definicion_instr -> NUMERO ID PTCOMA .)
    ID              reduce using rule 19 (definicion_instr -> NUMERO ID PTCOMA .)
    MIENTRAS        reduce using rule 19 (definicion_instr -> NUMERO ID PTCOMA .)
    IF              reduce using rule 19 (definicion_instr -> NUMERO ID PTCOMA .)
    FOR             reduce using rule 19 (definicion_instr -> NUMERO ID PTCOMA .)
    DEF             reduce using rule 19 (definicion_instr -> NUMERO ID PTCOMA .)
    DO              reduce using rule 19 (definicion_instr -> NUMERO ID PTCOMA .)
    COMA            reduce using rule 19 (definicion_instr -> NUMERO ID PTCOMA .)
    $end            reduce using rule 19 (definicion_instr -> NUMERO ID PTCOMA .)
    LLAVDER         reduce using rule 19 (definicion_instr -> NUMERO ID PTCOMA .)


state 46

    (20) asignacion_instr -> ID IGUAL expresion_numerica . PTCOMA
    (23) for_asign -> ID IGUAL expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PTCOMA          shift and go to state 62
    IMPRIMIR        reduce using rule 23 (for_asign -> ID IGUAL expresion_numerica .)
    NUMERO          reduce using rule 23 (for_asign -> ID IGUAL expresion_numerica .)
    ID              reduce using rule 23 (for_asign -> ID IGUAL expresion_numerica .)
    MIENTRAS        reduce using rule 23 (for_asign -> ID IGUAL expresion_numerica .)
    IF              reduce using rule 23 (for_asign -> ID IGUAL expresion_numerica .)
    FOR             reduce using rule 23 (for_asign -> ID IGUAL expresion_numerica .)
    DEF             reduce using rule 23 (for_asign -> ID IGUAL expresion_numerica .)
    DO              reduce using rule 23 (for_asign -> ID IGUAL expresion_numerica .)
    COMA            reduce using rule 23 (for_asign -> ID IGUAL expresion_numerica .)
    $end            reduce using rule 23 (for_asign -> ID IGUAL expresion_numerica .)
    LLAVDER         reduce using rule 23 (for_asign -> ID IGUAL expresion_numerica .)
    MAS             shift and go to state 57
    MENOS           shift and go to state 58
    POR             shift and go to state 59
    DIVIDIDO        shift and go to state 60


state 47

    (21) mientras_instr -> MIENTRAS PARIZQ expresion_logica . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 63


state 48

    (48) expresion_logica -> expresion_numerica . MAYQUE expresion_numerica
    (49) expresion_logica -> expresion_numerica . MENQUE expresion_numerica
    (50) expresion_logica -> expresion_numerica . IGUALQUE expresion_numerica
    (51) expresion_logica -> expresion_numerica . NIGUALQUE expresion_numerica
    (52) expresion_logica -> expresion_numerica . MAYIGUAL expresion_numerica
    (53) expresion_logica -> expresion_numerica . MENIGUAL expresion_numerica
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAYQUE          shift and go to state 64
    MENQUE          shift and go to state 65
    IGUALQUE        shift and go to state 66
    NIGUALQUE       shift and go to state 67
    MAYIGUAL        shift and go to state 68
    MENIGUAL        shift and go to state 69
    MAS             shift and go to state 57
    MENOS           shift and go to state 58
    POR             shift and go to state 59
    DIVIDIDO        shift and go to state 60


state 49

    (34) if_instr -> IF PARIZQ expresion_logica . PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> IF PARIZQ expresion_logica . PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 70


state 50

    (24) for_instr -> FOR PARIZQ for_asign . PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER

    PTCOMACERRADO   shift and go to state 71


state 51

    (23) for_asign -> ID . IGUAL expresion_numerica

    IGUAL           shift and go to state 72


state 52

    (31) function -> DEF ID PARIZQ . argument_list PARDER LLAVIZQ instrucciones LLAVDER
    (27) argument_list -> . argument_list COMA argument
    (28) argument_list -> . argument
    (29) argument_list -> . empty
    (30) argument -> . ID
    (3) empty -> .

    ID              shift and go to state 36
    PARDER          reduce using rule 3 (empty -> .)
    COMA            reduce using rule 3 (empty -> .)

    argument_list                  shift and go to state 73
    argument                       shift and go to state 74
    empty                          shift and go to state 75

state 53

    (22) do_mientras_instr -> DO LLAVIZQ instrucciones . LLAVDER MIENTRAS PARIZQ expresion_logica PARDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . mientras_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) instruccion -> . for_instr
    (12) instruccion -> . for_asign
    (13) instruccion -> . function
    (14) instruccion -> . argument_list
    (15) instruccion -> . argument
    (16) instruccion -> . empty
    (17) instruccion -> . do_mientras_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA
    (19) definicion_instr -> . NUMERO ID PTCOMA
    (20) asignacion_instr -> . ID IGUAL expresion_numerica PTCOMA
    (21) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (24) for_instr -> . FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER
    (23) for_asign -> . ID IGUAL expresion_numerica
    (31) function -> . DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER
    (27) argument_list -> . argument_list COMA argument
    (28) argument_list -> . argument
    (29) argument_list -> . empty
    (30) argument -> . ID
    (3) empty -> .
    (22) do_mientras_instr -> . DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER

  ! shift/reduce conflict for LLAVDER resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    LLAVDER         shift and go to state 76
    IMPRIMIR        shift and go to state 17
    NUMERO          shift and go to state 18
    ID              shift and go to state 19
    MIENTRAS        shift and go to state 20
    IF              shift and go to state 21
    FOR             shift and go to state 22
    DEF             shift and go to state 23
    COMA            reduce using rule 3 (empty -> .)
    DO              shift and go to state 24

  ! LLAVDER         [ reduce using rule 3 (empty -> .) ]
  ! IMPRIMIR        [ reduce using rule 3 (empty -> .) ]
  ! NUMERO          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! FOR             [ reduce using rule 3 (empty -> .) ]
  ! DEF             [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]

    instruccion                    shift and go to state 25
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    for_instr                      shift and go to state 10
    for_asign                      shift and go to state 11
    function                       shift and go to state 12
    argument_list                  shift and go to state 13
    argument                       shift and go to state 14
    empty                          shift and go to state 15
    do_mientras_instr              shift and go to state 16

state 54

    (41) expresion_numerica -> PARIZQ expresion_numerica . PARDER
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          shift and go to state 77
    MAS             shift and go to state 57
    MENOS           shift and go to state 58
    POR             shift and go to state 59
    DIVIDIDO        shift and go to state 60


state 55

    (18) imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER . PTCOMA

    PTCOMA          shift and go to state 78


state 56

    (45) expresion_cadena -> expresion_cadena CONCAT . expresion_cadena
    (45) expresion_cadena -> . expresion_cadena CONCAT expresion_cadena
    (46) expresion_cadena -> . CADENA
    (47) expresion_cadena -> . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    CADENA          shift and go to state 39
    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_cadena               shift and go to state 79
    expresion_numerica             shift and go to state 40

state 57

    (36) expresion_numerica -> expresion_numerica MAS . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_numerica             shift and go to state 80

state 58

    (37) expresion_numerica -> expresion_numerica MENOS . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_numerica             shift and go to state 81

state 59

    (38) expresion_numerica -> expresion_numerica POR . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_numerica             shift and go to state 82

state 60

    (39) expresion_numerica -> expresion_numerica DIVIDIDO . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_numerica             shift and go to state 83

state 61

    (40) expresion_numerica -> MENOS expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAS             reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    MENOS           reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    POR             reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    DIVIDIDO        reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    PARDER          reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    CONCAT          reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    PTCOMA          reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    IMPRIMIR        reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    NUMERO          reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    ID              reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    MIENTRAS        reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    IF              reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    FOR             reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    DEF             reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    DO              reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    COMA            reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    $end            reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    LLAVDER         reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    MAYQUE          reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    MENQUE          reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    IGUALQUE        reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    NIGUALQUE       reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    MAYIGUAL        reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    MENIGUAL        reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)
    PTCOMACERRADO   reduce using rule 40 (expresion_numerica -> MENOS expresion_numerica .)

  ! MAS             [ shift and go to state 57 ]
  ! MENOS           [ shift and go to state 58 ]
  ! POR             [ shift and go to state 59 ]
  ! DIVIDIDO        [ shift and go to state 60 ]


state 62

    (20) asignacion_instr -> ID IGUAL expresion_numerica PTCOMA .

    IMPRIMIR        reduce using rule 20 (asignacion_instr -> ID IGUAL expresion_numerica PTCOMA .)
    NUMERO          reduce using rule 20 (asignacion_instr -> ID IGUAL expresion_numerica PTCOMA .)
    ID              reduce using rule 20 (asignacion_instr -> ID IGUAL expresion_numerica PTCOMA .)
    MIENTRAS        reduce using rule 20 (asignacion_instr -> ID IGUAL expresion_numerica PTCOMA .)
    IF              reduce using rule 20 (asignacion_instr -> ID IGUAL expresion_numerica PTCOMA .)
    FOR             reduce using rule 20 (asignacion_instr -> ID IGUAL expresion_numerica PTCOMA .)
    DEF             reduce using rule 20 (asignacion_instr -> ID IGUAL expresion_numerica PTCOMA .)
    DO              reduce using rule 20 (asignacion_instr -> ID IGUAL expresion_numerica PTCOMA .)
    COMA            reduce using rule 20 (asignacion_instr -> ID IGUAL expresion_numerica PTCOMA .)
    $end            reduce using rule 20 (asignacion_instr -> ID IGUAL expresion_numerica PTCOMA .)
    LLAVDER         reduce using rule 20 (asignacion_instr -> ID IGUAL expresion_numerica PTCOMA .)


state 63

    (21) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 84


state 64

    (48) expresion_logica -> expresion_numerica MAYQUE . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_numerica             shift and go to state 85

state 65

    (49) expresion_logica -> expresion_numerica MENQUE . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_numerica             shift and go to state 86

state 66

    (50) expresion_logica -> expresion_numerica IGUALQUE . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_numerica             shift and go to state 87

state 67

    (51) expresion_logica -> expresion_numerica NIGUALQUE . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_numerica             shift and go to state 88

state 68

    (52) expresion_logica -> expresion_numerica MAYIGUAL . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_numerica             shift and go to state 89

state 69

    (53) expresion_logica -> expresion_numerica MENIGUAL . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_numerica             shift and go to state 90

state 70

    (34) if_instr -> IF PARIZQ expresion_logica PARDER . LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> IF PARIZQ expresion_logica PARDER . LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 91


state 71

    (24) for_instr -> FOR PARIZQ for_asign PTCOMACERRADO . expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER
    (48) expresion_logica -> . expresion_numerica MAYQUE expresion_numerica
    (49) expresion_logica -> . expresion_numerica MENQUE expresion_numerica
    (50) expresion_logica -> . expresion_numerica IGUALQUE expresion_numerica
    (51) expresion_logica -> . expresion_numerica NIGUALQUE expresion_numerica
    (52) expresion_logica -> . expresion_numerica MAYIGUAL expresion_numerica
    (53) expresion_logica -> . expresion_numerica MENIGUAL expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_logica               shift and go to state 92
    expresion_numerica             shift and go to state 48

state 72

    (23) for_asign -> ID IGUAL . expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_numerica             shift and go to state 93

state 73

    (31) function -> DEF ID PARIZQ argument_list . PARDER LLAVIZQ instrucciones LLAVDER
    (27) argument_list -> argument_list . COMA argument

    PARDER          shift and go to state 94
    COMA            shift and go to state 26


state 74

    (28) argument_list -> argument .

    PARDER          reduce using rule 28 (argument_list -> argument .)
    COMA            reduce using rule 28 (argument_list -> argument .)


state 75

    (29) argument_list -> empty .

    PARDER          reduce using rule 29 (argument_list -> empty .)
    COMA            reduce using rule 29 (argument_list -> empty .)


state 76

    (22) do_mientras_instr -> DO LLAVIZQ instrucciones LLAVDER . MIENTRAS PARIZQ expresion_logica PARDER

    MIENTRAS        shift and go to state 95


state 77

    (41) expresion_numerica -> PARIZQ expresion_numerica PARDER .

    MAS             reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MENOS           reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    POR             reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    DIVIDIDO        reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    PARDER          reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    CONCAT          reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    PTCOMA          reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    IMPRIMIR        reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    NUMERO          reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    ID              reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MIENTRAS        reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    IF              reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    FOR             reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    DEF             reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    DO              reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    COMA            reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    $end            reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    LLAVDER         reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MAYQUE          reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MENQUE          reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    IGUALQUE        reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    NIGUALQUE       reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MAYIGUAL        reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MENIGUAL        reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    PTCOMACERRADO   reduce using rule 41 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)


state 78

    (18) imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA .

    IMPRIMIR        reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA .)
    NUMERO          reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA .)
    ID              reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA .)
    MIENTRAS        reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA .)
    IF              reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA .)
    FOR             reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA .)
    DEF             reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA .)
    DO              reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA .)
    COMA            reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA .)
    $end            reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA .)
    LLAVDER         reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA .)


state 79

    (45) expresion_cadena -> expresion_cadena CONCAT expresion_cadena .
    (45) expresion_cadena -> expresion_cadena . CONCAT expresion_cadena

    PARDER          reduce using rule 45 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)
    CONCAT          reduce using rule 45 (expresion_cadena -> expresion_cadena CONCAT expresion_cadena .)

  ! CONCAT          [ shift and go to state 56 ]


state 80

    (36) expresion_numerica -> expresion_numerica MAS expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAS             reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MENOS           reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    PARDER          reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    CONCAT          reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    PTCOMA          reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    IMPRIMIR        reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    NUMERO          reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    ID              reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MIENTRAS        reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    IF              reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    FOR             reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    DEF             reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    DO              reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    COMA            reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    $end            reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    LLAVDER         reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MAYQUE          reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MENQUE          reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    IGUALQUE        reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    NIGUALQUE       reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MAYIGUAL        reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MENIGUAL        reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    PTCOMACERRADO   reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    POR             shift and go to state 59
    DIVIDIDO        shift and go to state 60

  ! POR             [ reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .) ]
  ! DIVIDIDO        [ reduce using rule 36 (expresion_numerica -> expresion_numerica MAS expresion_numerica .) ]
  ! MAS             [ shift and go to state 57 ]
  ! MENOS           [ shift and go to state 58 ]


state 81

    (37) expresion_numerica -> expresion_numerica MENOS expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAS             reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MENOS           reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    PARDER          reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    CONCAT          reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    PTCOMA          reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    IMPRIMIR        reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    NUMERO          reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    ID              reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MIENTRAS        reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    IF              reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    FOR             reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    DEF             reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    DO              reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    COMA            reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    $end            reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    LLAVDER         reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MAYQUE          reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MENQUE          reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    IGUALQUE        reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    NIGUALQUE       reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MAYIGUAL        reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MENIGUAL        reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    PTCOMACERRADO   reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    POR             shift and go to state 59
    DIVIDIDO        shift and go to state 60

  ! POR             [ reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .) ]
  ! DIVIDIDO        [ reduce using rule 37 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .) ]
  ! MAS             [ shift and go to state 57 ]
  ! MENOS           [ shift and go to state 58 ]


state 82

    (38) expresion_numerica -> expresion_numerica POR expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAS             reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MENOS           reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    POR             reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    DIVIDIDO        reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    PARDER          reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    CONCAT          reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    PTCOMA          reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    IMPRIMIR        reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    NUMERO          reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    ID              reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MIENTRAS        reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    IF              reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    FOR             reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    DEF             reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    DO              reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    COMA            reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    $end            reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    LLAVDER         reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MAYQUE          reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MENQUE          reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    IGUALQUE        reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    NIGUALQUE       reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MAYIGUAL        reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MENIGUAL        reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    PTCOMACERRADO   reduce using rule 38 (expresion_numerica -> expresion_numerica POR expresion_numerica .)

  ! MAS             [ shift and go to state 57 ]
  ! MENOS           [ shift and go to state 58 ]
  ! POR             [ shift and go to state 59 ]
  ! DIVIDIDO        [ shift and go to state 60 ]


state 83

    (39) expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    MAS             reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MENOS           reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    POR             reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    DIVIDIDO        reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    PARDER          reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    CONCAT          reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    PTCOMA          reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    IMPRIMIR        reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    NUMERO          reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    ID              reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MIENTRAS        reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    IF              reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    FOR             reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    DEF             reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    DO              reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    COMA            reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    $end            reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    LLAVDER         reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MAYQUE          reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MENQUE          reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    IGUALQUE        reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    NIGUALQUE       reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MAYIGUAL        reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MENIGUAL        reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    PTCOMACERRADO   reduce using rule 39 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)

  ! MAS             [ shift and go to state 57 ]
  ! MENOS           [ shift and go to state 58 ]
  ! POR             [ shift and go to state 59 ]
  ! DIVIDIDO        [ shift and go to state 60 ]


state 84

    (21) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (4) instrucciones -> . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . mientras_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) instruccion -> . for_instr
    (12) instruccion -> . for_asign
    (13) instruccion -> . function
    (14) instruccion -> . argument_list
    (15) instruccion -> . argument
    (16) instruccion -> . empty
    (17) instruccion -> . do_mientras_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA
    (19) definicion_instr -> . NUMERO ID PTCOMA
    (20) asignacion_instr -> . ID IGUAL expresion_numerica PTCOMA
    (21) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (24) for_instr -> . FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER
    (23) for_asign -> . ID IGUAL expresion_numerica
    (31) function -> . DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER
    (27) argument_list -> . argument_list COMA argument
    (28) argument_list -> . argument
    (29) argument_list -> . empty
    (30) argument -> . ID
    (3) empty -> .
    (22) do_mientras_instr -> . DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER

  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IMPRIMIR        shift and go to state 17
    NUMERO          shift and go to state 18
    ID              shift and go to state 19
    MIENTRAS        shift and go to state 20
    IF              shift and go to state 21
    FOR             shift and go to state 22
    DEF             shift and go to state 23
    LLAVDER         reduce using rule 3 (empty -> .)
    COMA            reduce using rule 3 (empty -> .)
    DO              shift and go to state 24

  ! IMPRIMIR        [ reduce using rule 3 (empty -> .) ]
  ! NUMERO          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! FOR             [ reduce using rule 3 (empty -> .) ]
  ! DEF             [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]

    instrucciones                  shift and go to state 96
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    for_instr                      shift and go to state 10
    for_asign                      shift and go to state 11
    function                       shift and go to state 12
    argument_list                  shift and go to state 13
    argument                       shift and go to state 14
    empty                          shift and go to state 15
    do_mientras_instr              shift and go to state 16

state 85

    (48) expresion_logica -> expresion_numerica MAYQUE expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          reduce using rule 48 (expresion_logica -> expresion_numerica MAYQUE expresion_numerica .)
    PTCOMACERRADO   reduce using rule 48 (expresion_logica -> expresion_numerica MAYQUE expresion_numerica .)
    MAS             shift and go to state 57
    MENOS           shift and go to state 58
    POR             shift and go to state 59
    DIVIDIDO        shift and go to state 60


state 86

    (49) expresion_logica -> expresion_numerica MENQUE expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          reduce using rule 49 (expresion_logica -> expresion_numerica MENQUE expresion_numerica .)
    PTCOMACERRADO   reduce using rule 49 (expresion_logica -> expresion_numerica MENQUE expresion_numerica .)
    MAS             shift and go to state 57
    MENOS           shift and go to state 58
    POR             shift and go to state 59
    DIVIDIDO        shift and go to state 60


state 87

    (50) expresion_logica -> expresion_numerica IGUALQUE expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          reduce using rule 50 (expresion_logica -> expresion_numerica IGUALQUE expresion_numerica .)
    PTCOMACERRADO   reduce using rule 50 (expresion_logica -> expresion_numerica IGUALQUE expresion_numerica .)
    MAS             shift and go to state 57
    MENOS           shift and go to state 58
    POR             shift and go to state 59
    DIVIDIDO        shift and go to state 60


state 88

    (51) expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          reduce using rule 51 (expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica .)
    PTCOMACERRADO   reduce using rule 51 (expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica .)
    MAS             shift and go to state 57
    MENOS           shift and go to state 58
    POR             shift and go to state 59
    DIVIDIDO        shift and go to state 60


state 89

    (52) expresion_logica -> expresion_numerica MAYIGUAL expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          reduce using rule 52 (expresion_logica -> expresion_numerica MAYIGUAL expresion_numerica .)
    PTCOMACERRADO   reduce using rule 52 (expresion_logica -> expresion_numerica MAYIGUAL expresion_numerica .)
    MAS             shift and go to state 57
    MENOS           shift and go to state 58
    POR             shift and go to state 59
    DIVIDIDO        shift and go to state 60


state 90

    (53) expresion_logica -> expresion_numerica MENIGUAL expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PARDER          reduce using rule 53 (expresion_logica -> expresion_numerica MENIGUAL expresion_numerica .)
    PTCOMACERRADO   reduce using rule 53 (expresion_logica -> expresion_numerica MENIGUAL expresion_numerica .)
    MAS             shift and go to state 57
    MENOS           shift and go to state 58
    POR             shift and go to state 59
    DIVIDIDO        shift and go to state 60


state 91

    (34) if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ . instrucciones LLAVDER
    (35) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ . instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (4) instrucciones -> . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . mientras_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) instruccion -> . for_instr
    (12) instruccion -> . for_asign
    (13) instruccion -> . function
    (14) instruccion -> . argument_list
    (15) instruccion -> . argument
    (16) instruccion -> . empty
    (17) instruccion -> . do_mientras_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA
    (19) definicion_instr -> . NUMERO ID PTCOMA
    (20) asignacion_instr -> . ID IGUAL expresion_numerica PTCOMA
    (21) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (24) for_instr -> . FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER
    (23) for_asign -> . ID IGUAL expresion_numerica
    (31) function -> . DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER
    (27) argument_list -> . argument_list COMA argument
    (28) argument_list -> . argument
    (29) argument_list -> . empty
    (30) argument -> . ID
    (3) empty -> .
    (22) do_mientras_instr -> . DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER

  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IMPRIMIR        shift and go to state 17
    NUMERO          shift and go to state 18
    ID              shift and go to state 19
    MIENTRAS        shift and go to state 20
    IF              shift and go to state 21
    FOR             shift and go to state 22
    DEF             shift and go to state 23
    LLAVDER         reduce using rule 3 (empty -> .)
    COMA            reduce using rule 3 (empty -> .)
    DO              shift and go to state 24

  ! IMPRIMIR        [ reduce using rule 3 (empty -> .) ]
  ! NUMERO          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! FOR             [ reduce using rule 3 (empty -> .) ]
  ! DEF             [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]

    instrucciones                  shift and go to state 97
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    for_instr                      shift and go to state 10
    for_asign                      shift and go to state 11
    function                       shift and go to state 12
    argument_list                  shift and go to state 13
    argument                       shift and go to state 14
    empty                          shift and go to state 15
    do_mientras_instr              shift and go to state 16

state 92

    (24) for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica . PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER

    PTCOMACERRADO   shift and go to state 98


state 93

    (23) for_asign -> ID IGUAL expresion_numerica .
    (36) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (37) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (38) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (39) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica

    PTCOMACERRADO   reduce using rule 23 (for_asign -> ID IGUAL expresion_numerica .)
    PARDER          reduce using rule 23 (for_asign -> ID IGUAL expresion_numerica .)
    MAS             shift and go to state 57
    MENOS           shift and go to state 58
    POR             shift and go to state 59
    DIVIDIDO        shift and go to state 60


state 94

    (31) function -> DEF ID PARIZQ argument_list PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 99


state 95

    (22) do_mientras_instr -> DO LLAVIZQ instrucciones LLAVDER MIENTRAS . PARIZQ expresion_logica PARDER

    PARIZQ          shift and go to state 100


state 96

    (21) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . mientras_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) instruccion -> . for_instr
    (12) instruccion -> . for_asign
    (13) instruccion -> . function
    (14) instruccion -> . argument_list
    (15) instruccion -> . argument
    (16) instruccion -> . empty
    (17) instruccion -> . do_mientras_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA
    (19) definicion_instr -> . NUMERO ID PTCOMA
    (20) asignacion_instr -> . ID IGUAL expresion_numerica PTCOMA
    (21) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (24) for_instr -> . FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER
    (23) for_asign -> . ID IGUAL expresion_numerica
    (31) function -> . DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER
    (27) argument_list -> . argument_list COMA argument
    (28) argument_list -> . argument
    (29) argument_list -> . empty
    (30) argument -> . ID
    (3) empty -> .
    (22) do_mientras_instr -> . DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER

  ! shift/reduce conflict for LLAVDER resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    LLAVDER         shift and go to state 101
    IMPRIMIR        shift and go to state 17
    NUMERO          shift and go to state 18
    ID              shift and go to state 19
    MIENTRAS        shift and go to state 20
    IF              shift and go to state 21
    FOR             shift and go to state 22
    DEF             shift and go to state 23
    COMA            reduce using rule 3 (empty -> .)
    DO              shift and go to state 24

  ! LLAVDER         [ reduce using rule 3 (empty -> .) ]
  ! IMPRIMIR        [ reduce using rule 3 (empty -> .) ]
  ! NUMERO          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! FOR             [ reduce using rule 3 (empty -> .) ]
  ! DEF             [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]

    instruccion                    shift and go to state 25
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    for_instr                      shift and go to state 10
    for_asign                      shift and go to state 11
    function                       shift and go to state 12
    argument_list                  shift and go to state 13
    argument                       shift and go to state 14
    empty                          shift and go to state 15
    do_mientras_instr              shift and go to state 16

state 97

    (34) if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones . LLAVDER
    (35) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones . LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . mientras_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) instruccion -> . for_instr
    (12) instruccion -> . for_asign
    (13) instruccion -> . function
    (14) instruccion -> . argument_list
    (15) instruccion -> . argument
    (16) instruccion -> . empty
    (17) instruccion -> . do_mientras_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA
    (19) definicion_instr -> . NUMERO ID PTCOMA
    (20) asignacion_instr -> . ID IGUAL expresion_numerica PTCOMA
    (21) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (24) for_instr -> . FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER
    (23) for_asign -> . ID IGUAL expresion_numerica
    (31) function -> . DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER
    (27) argument_list -> . argument_list COMA argument
    (28) argument_list -> . argument
    (29) argument_list -> . empty
    (30) argument -> . ID
    (3) empty -> .
    (22) do_mientras_instr -> . DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER

  ! shift/reduce conflict for LLAVDER resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    LLAVDER         shift and go to state 102
    IMPRIMIR        shift and go to state 17
    NUMERO          shift and go to state 18
    ID              shift and go to state 19
    MIENTRAS        shift and go to state 20
    IF              shift and go to state 21
    FOR             shift and go to state 22
    DEF             shift and go to state 23
    COMA            reduce using rule 3 (empty -> .)
    DO              shift and go to state 24

  ! LLAVDER         [ reduce using rule 3 (empty -> .) ]
  ! IMPRIMIR        [ reduce using rule 3 (empty -> .) ]
  ! NUMERO          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! FOR             [ reduce using rule 3 (empty -> .) ]
  ! DEF             [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]

    instruccion                    shift and go to state 25
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    for_instr                      shift and go to state 10
    for_asign                      shift and go to state 11
    function                       shift and go to state 12
    argument_list                  shift and go to state 13
    argument                       shift and go to state 14
    empty                          shift and go to state 15
    do_mientras_instr              shift and go to state 16

state 98

    (24) for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO . for_asign PARDER LLAVIZQ instrucciones LLAVDER
    (23) for_asign -> . ID IGUAL expresion_numerica

    ID              shift and go to state 51

    for_asign                      shift and go to state 103

state 99

    (31) function -> DEF ID PARIZQ argument_list PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (4) instrucciones -> . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . mientras_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) instruccion -> . for_instr
    (12) instruccion -> . for_asign
    (13) instruccion -> . function
    (14) instruccion -> . argument_list
    (15) instruccion -> . argument
    (16) instruccion -> . empty
    (17) instruccion -> . do_mientras_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA
    (19) definicion_instr -> . NUMERO ID PTCOMA
    (20) asignacion_instr -> . ID IGUAL expresion_numerica PTCOMA
    (21) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (24) for_instr -> . FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER
    (23) for_asign -> . ID IGUAL expresion_numerica
    (31) function -> . DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER
    (27) argument_list -> . argument_list COMA argument
    (28) argument_list -> . argument
    (29) argument_list -> . empty
    (30) argument -> . ID
    (3) empty -> .
    (22) do_mientras_instr -> . DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER

  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IMPRIMIR        shift and go to state 17
    NUMERO          shift and go to state 18
    ID              shift and go to state 19
    MIENTRAS        shift and go to state 20
    IF              shift and go to state 21
    FOR             shift and go to state 22
    DEF             shift and go to state 23
    LLAVDER         reduce using rule 3 (empty -> .)
    COMA            reduce using rule 3 (empty -> .)
    DO              shift and go to state 24

  ! IMPRIMIR        [ reduce using rule 3 (empty -> .) ]
  ! NUMERO          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! FOR             [ reduce using rule 3 (empty -> .) ]
  ! DEF             [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]

    argument_list                  shift and go to state 13
    instrucciones                  shift and go to state 104
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    for_instr                      shift and go to state 10
    for_asign                      shift and go to state 11
    function                       shift and go to state 12
    argument                       shift and go to state 14
    empty                          shift and go to state 15
    do_mientras_instr              shift and go to state 16

state 100

    (22) do_mientras_instr -> DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ . expresion_logica PARDER
    (48) expresion_logica -> . expresion_numerica MAYQUE expresion_numerica
    (49) expresion_logica -> . expresion_numerica MENQUE expresion_numerica
    (50) expresion_logica -> . expresion_numerica IGUALQUE expresion_numerica
    (51) expresion_logica -> . expresion_numerica NIGUALQUE expresion_numerica
    (52) expresion_logica -> . expresion_numerica MAYIGUAL expresion_numerica
    (53) expresion_logica -> . expresion_numerica MENIGUAL expresion_numerica
    (36) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (37) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (38) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (39) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (40) expresion_numerica -> . MENOS expresion_numerica
    (41) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (42) expresion_numerica -> . ENTERO
    (43) expresion_numerica -> . DECIMAL
    (44) expresion_numerica -> . ID

    MENOS           shift and go to state 41
    PARIZQ          shift and go to state 37
    ENTERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    ID              shift and go to state 44

    expresion_logica               shift and go to state 105
    expresion_numerica             shift and go to state 48

state 101

    (21) mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .

    IMPRIMIR        reduce using rule 21 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    NUMERO          reduce using rule 21 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 21 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    MIENTRAS        reduce using rule 21 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 21 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 21 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    DEF             reduce using rule 21 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    DO              reduce using rule 21 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    COMA            reduce using rule 21 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 21 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 21 (mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)


state 102

    (34) if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .
    (35) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER . ELSE LLAVIZQ instrucciones LLAVDER

    IMPRIMIR        reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    NUMERO          reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    MIENTRAS        reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    DEF             reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    DO              reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    COMA            reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 34 (if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER .)
    ELSE            shift and go to state 106


state 103

    (24) for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 107


state 104

    (31) function -> DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . mientras_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) instruccion -> . for_instr
    (12) instruccion -> . for_asign
    (13) instruccion -> . function
    (14) instruccion -> . argument_list
    (15) instruccion -> . argument
    (16) instruccion -> . empty
    (17) instruccion -> . do_mientras_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA
    (19) definicion_instr -> . NUMERO ID PTCOMA
    (20) asignacion_instr -> . ID IGUAL expresion_numerica PTCOMA
    (21) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (24) for_instr -> . FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER
    (23) for_asign -> . ID IGUAL expresion_numerica
    (31) function -> . DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER
    (27) argument_list -> . argument_list COMA argument
    (28) argument_list -> . argument
    (29) argument_list -> . empty
    (30) argument -> . ID
    (3) empty -> .
    (22) do_mientras_instr -> . DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER

  ! shift/reduce conflict for LLAVDER resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    LLAVDER         shift and go to state 108
    IMPRIMIR        shift and go to state 17
    NUMERO          shift and go to state 18
    ID              shift and go to state 19
    MIENTRAS        shift and go to state 20
    IF              shift and go to state 21
    FOR             shift and go to state 22
    DEF             shift and go to state 23
    COMA            reduce using rule 3 (empty -> .)
    DO              shift and go to state 24

  ! LLAVDER         [ reduce using rule 3 (empty -> .) ]
  ! IMPRIMIR        [ reduce using rule 3 (empty -> .) ]
  ! NUMERO          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! FOR             [ reduce using rule 3 (empty -> .) ]
  ! DEF             [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]

    argument_list                  shift and go to state 13
    instruccion                    shift and go to state 25
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    for_instr                      shift and go to state 10
    for_asign                      shift and go to state 11
    function                       shift and go to state 12
    argument                       shift and go to state 14
    empty                          shift and go to state 15
    do_mientras_instr              shift and go to state 16

state 105

    (22) do_mientras_instr -> DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica . PARDER

    PARDER          shift and go to state 109


state 106

    (35) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 110


state 107

    (24) for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 111


state 108

    (31) function -> DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER .

    IMPRIMIR        reduce using rule 31 (function -> DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER .)
    NUMERO          reduce using rule 31 (function -> DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 31 (function -> DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER .)
    MIENTRAS        reduce using rule 31 (function -> DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 31 (function -> DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 31 (function -> DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER .)
    DEF             reduce using rule 31 (function -> DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER .)
    DO              reduce using rule 31 (function -> DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER .)
    COMA            reduce using rule 31 (function -> DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 31 (function -> DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 31 (function -> DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER .)


state 109

    (22) do_mientras_instr -> DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER .

    IMPRIMIR        reduce using rule 22 (do_mientras_instr -> DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER .)
    NUMERO          reduce using rule 22 (do_mientras_instr -> DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER .)
    ID              reduce using rule 22 (do_mientras_instr -> DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER .)
    MIENTRAS        reduce using rule 22 (do_mientras_instr -> DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER .)
    IF              reduce using rule 22 (do_mientras_instr -> DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER .)
    FOR             reduce using rule 22 (do_mientras_instr -> DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER .)
    DEF             reduce using rule 22 (do_mientras_instr -> DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER .)
    DO              reduce using rule 22 (do_mientras_instr -> DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER .)
    COMA            reduce using rule 22 (do_mientras_instr -> DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER .)
    $end            reduce using rule 22 (do_mientras_instr -> DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER .)
    LLAVDER         reduce using rule 22 (do_mientras_instr -> DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER .)


state 110

    (35) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (4) instrucciones -> . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . mientras_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) instruccion -> . for_instr
    (12) instruccion -> . for_asign
    (13) instruccion -> . function
    (14) instruccion -> . argument_list
    (15) instruccion -> . argument
    (16) instruccion -> . empty
    (17) instruccion -> . do_mientras_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA
    (19) definicion_instr -> . NUMERO ID PTCOMA
    (20) asignacion_instr -> . ID IGUAL expresion_numerica PTCOMA
    (21) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (24) for_instr -> . FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER
    (23) for_asign -> . ID IGUAL expresion_numerica
    (31) function -> . DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER
    (27) argument_list -> . argument_list COMA argument
    (28) argument_list -> . argument
    (29) argument_list -> . empty
    (30) argument -> . ID
    (3) empty -> .
    (22) do_mientras_instr -> . DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER

  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IMPRIMIR        shift and go to state 17
    NUMERO          shift and go to state 18
    ID              shift and go to state 19
    MIENTRAS        shift and go to state 20
    IF              shift and go to state 21
    FOR             shift and go to state 22
    DEF             shift and go to state 23
    LLAVDER         reduce using rule 3 (empty -> .)
    COMA            reduce using rule 3 (empty -> .)
    DO              shift and go to state 24

  ! IMPRIMIR        [ reduce using rule 3 (empty -> .) ]
  ! NUMERO          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! FOR             [ reduce using rule 3 (empty -> .) ]
  ! DEF             [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]

    instrucciones                  shift and go to state 112
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    for_instr                      shift and go to state 10
    for_asign                      shift and go to state 11
    function                       shift and go to state 12
    argument_list                  shift and go to state 13
    argument                       shift and go to state 14
    empty                          shift and go to state 15
    do_mientras_instr              shift and go to state 16

state 111

    (24) for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (4) instrucciones -> . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . mientras_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) instruccion -> . for_instr
    (12) instruccion -> . for_asign
    (13) instruccion -> . function
    (14) instruccion -> . argument_list
    (15) instruccion -> . argument
    (16) instruccion -> . empty
    (17) instruccion -> . do_mientras_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA
    (19) definicion_instr -> . NUMERO ID PTCOMA
    (20) asignacion_instr -> . ID IGUAL expresion_numerica PTCOMA
    (21) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (24) for_instr -> . FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER
    (23) for_asign -> . ID IGUAL expresion_numerica
    (31) function -> . DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER
    (27) argument_list -> . argument_list COMA argument
    (28) argument_list -> . argument
    (29) argument_list -> . empty
    (30) argument -> . ID
    (3) empty -> .
    (22) do_mientras_instr -> . DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER

  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IMPRIMIR        shift and go to state 17
    NUMERO          shift and go to state 18
    ID              shift and go to state 19
    MIENTRAS        shift and go to state 20
    IF              shift and go to state 21
    FOR             shift and go to state 22
    DEF             shift and go to state 23
    LLAVDER         reduce using rule 3 (empty -> .)
    COMA            reduce using rule 3 (empty -> .)
    DO              shift and go to state 24

  ! IMPRIMIR        [ reduce using rule 3 (empty -> .) ]
  ! NUMERO          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! FOR             [ reduce using rule 3 (empty -> .) ]
  ! DEF             [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]

    for_asign                      shift and go to state 11
    instrucciones                  shift and go to state 113
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    for_instr                      shift and go to state 10
    function                       shift and go to state 12
    argument_list                  shift and go to state 13
    argument                       shift and go to state 14
    empty                          shift and go to state 15
    do_mientras_instr              shift and go to state 16

state 112

    (35) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . mientras_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) instruccion -> . for_instr
    (12) instruccion -> . for_asign
    (13) instruccion -> . function
    (14) instruccion -> . argument_list
    (15) instruccion -> . argument
    (16) instruccion -> . empty
    (17) instruccion -> . do_mientras_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA
    (19) definicion_instr -> . NUMERO ID PTCOMA
    (20) asignacion_instr -> . ID IGUAL expresion_numerica PTCOMA
    (21) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (24) for_instr -> . FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER
    (23) for_asign -> . ID IGUAL expresion_numerica
    (31) function -> . DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER
    (27) argument_list -> . argument_list COMA argument
    (28) argument_list -> . argument
    (29) argument_list -> . empty
    (30) argument -> . ID
    (3) empty -> .
    (22) do_mientras_instr -> . DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER

  ! shift/reduce conflict for LLAVDER resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    LLAVDER         shift and go to state 114
    IMPRIMIR        shift and go to state 17
    NUMERO          shift and go to state 18
    ID              shift and go to state 19
    MIENTRAS        shift and go to state 20
    IF              shift and go to state 21
    FOR             shift and go to state 22
    DEF             shift and go to state 23
    COMA            reduce using rule 3 (empty -> .)
    DO              shift and go to state 24

  ! LLAVDER         [ reduce using rule 3 (empty -> .) ]
  ! IMPRIMIR        [ reduce using rule 3 (empty -> .) ]
  ! NUMERO          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! FOR             [ reduce using rule 3 (empty -> .) ]
  ! DEF             [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]

    instruccion                    shift and go to state 25
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    for_instr                      shift and go to state 10
    for_asign                      shift and go to state 11
    function                       shift and go to state 12
    argument_list                  shift and go to state 13
    argument                       shift and go to state 14
    empty                          shift and go to state 15
    do_mientras_instr              shift and go to state 16

state 113

    (24) for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (5) instruccion -> . imprimir_instr
    (6) instruccion -> . definicion_instr
    (7) instruccion -> . asignacion_instr
    (8) instruccion -> . mientras_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . if_else_instr
    (11) instruccion -> . for_instr
    (12) instruccion -> . for_asign
    (13) instruccion -> . function
    (14) instruccion -> . argument_list
    (15) instruccion -> . argument
    (16) instruccion -> . empty
    (17) instruccion -> . do_mientras_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA
    (19) definicion_instr -> . NUMERO ID PTCOMA
    (20) asignacion_instr -> . ID IGUAL expresion_numerica PTCOMA
    (21) mientras_instr -> . MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (34) if_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER
    (35) if_else_instr -> . IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER
    (24) for_instr -> . FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER
    (23) for_asign -> . ID IGUAL expresion_numerica
    (31) function -> . DEF ID PARIZQ argument_list PARDER LLAVIZQ instrucciones LLAVDER
    (27) argument_list -> . argument_list COMA argument
    (28) argument_list -> . argument
    (29) argument_list -> . empty
    (30) argument -> . ID
    (3) empty -> .
    (22) do_mientras_instr -> . DO LLAVIZQ instrucciones LLAVDER MIENTRAS PARIZQ expresion_logica PARDER

  ! shift/reduce conflict for LLAVDER resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for NUMERO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    LLAVDER         shift and go to state 115
    IMPRIMIR        shift and go to state 17
    NUMERO          shift and go to state 18
    ID              shift and go to state 19
    MIENTRAS        shift and go to state 20
    IF              shift and go to state 21
    FOR             shift and go to state 22
    DEF             shift and go to state 23
    COMA            reduce using rule 3 (empty -> .)
    DO              shift and go to state 24

  ! LLAVDER         [ reduce using rule 3 (empty -> .) ]
  ! IMPRIMIR        [ reduce using rule 3 (empty -> .) ]
  ! NUMERO          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! FOR             [ reduce using rule 3 (empty -> .) ]
  ! DEF             [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]

    for_asign                      shift and go to state 11
    instruccion                    shift and go to state 25
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    for_instr                      shift and go to state 10
    function                       shift and go to state 12
    argument_list                  shift and go to state 13
    argument                       shift and go to state 14
    empty                          shift and go to state 15
    do_mientras_instr              shift and go to state 16

state 114

    (35) if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .

    IMPRIMIR        reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    NUMERO          reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    MIENTRAS        reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    DEF             reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    DO              reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    COMA            reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 35 (if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER .)


state 115

    (24) for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER .

    IMPRIMIR        reduce using rule 24 (for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER .)
    NUMERO          reduce using rule 24 (for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 24 (for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER .)
    MIENTRAS        reduce using rule 24 (for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 24 (for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 24 (for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER .)
    DEF             reduce using rule 24 (for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER .)
    DO              reduce using rule 24 (for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER .)
    COMA            reduce using rule 24 (for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 24 (for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 24 (for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IMPRIMIR in state 0 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for DEF in state 0 resolved as shift
WARNING: shift/reduce conflict for DO in state 0 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 2 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 2 resolved as shift
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for DEF in state 2 resolved as shift
WARNING: shift/reduce conflict for DO in state 2 resolved as shift
WARNING: shift/reduce conflict for COMA in state 13 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 34 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 34 resolved as shift
WARNING: shift/reduce conflict for ID in state 34 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 34 resolved as shift
WARNING: shift/reduce conflict for IF in state 34 resolved as shift
WARNING: shift/reduce conflict for FOR in state 34 resolved as shift
WARNING: shift/reduce conflict for DEF in state 34 resolved as shift
WARNING: shift/reduce conflict for DO in state 34 resolved as shift
WARNING: shift/reduce conflict for LLAVDER in state 53 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 53 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 53 resolved as shift
WARNING: shift/reduce conflict for ID in state 53 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 53 resolved as shift
WARNING: shift/reduce conflict for IF in state 53 resolved as shift
WARNING: shift/reduce conflict for FOR in state 53 resolved as shift
WARNING: shift/reduce conflict for DEF in state 53 resolved as shift
WARNING: shift/reduce conflict for DO in state 53 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 84 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 84 resolved as shift
WARNING: shift/reduce conflict for IF in state 84 resolved as shift
WARNING: shift/reduce conflict for FOR in state 84 resolved as shift
WARNING: shift/reduce conflict for DEF in state 84 resolved as shift
WARNING: shift/reduce conflict for DO in state 84 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 91 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 91 resolved as shift
WARNING: shift/reduce conflict for ID in state 91 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 91 resolved as shift
WARNING: shift/reduce conflict for IF in state 91 resolved as shift
WARNING: shift/reduce conflict for FOR in state 91 resolved as shift
WARNING: shift/reduce conflict for DEF in state 91 resolved as shift
WARNING: shift/reduce conflict for DO in state 91 resolved as shift
WARNING: shift/reduce conflict for LLAVDER in state 96 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 96 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 96 resolved as shift
WARNING: shift/reduce conflict for ID in state 96 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 96 resolved as shift
WARNING: shift/reduce conflict for IF in state 96 resolved as shift
WARNING: shift/reduce conflict for FOR in state 96 resolved as shift
WARNING: shift/reduce conflict for DEF in state 96 resolved as shift
WARNING: shift/reduce conflict for DO in state 96 resolved as shift
WARNING: shift/reduce conflict for LLAVDER in state 97 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 97 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 97 resolved as shift
WARNING: shift/reduce conflict for ID in state 97 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 97 resolved as shift
WARNING: shift/reduce conflict for IF in state 97 resolved as shift
WARNING: shift/reduce conflict for FOR in state 97 resolved as shift
WARNING: shift/reduce conflict for DEF in state 97 resolved as shift
WARNING: shift/reduce conflict for DO in state 97 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 99 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 99 resolved as shift
WARNING: shift/reduce conflict for ID in state 99 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 99 resolved as shift
WARNING: shift/reduce conflict for IF in state 99 resolved as shift
WARNING: shift/reduce conflict for FOR in state 99 resolved as shift
WARNING: shift/reduce conflict for DEF in state 99 resolved as shift
WARNING: shift/reduce conflict for DO in state 99 resolved as shift
WARNING: shift/reduce conflict for LLAVDER in state 104 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 104 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 104 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 104 resolved as shift
WARNING: shift/reduce conflict for IF in state 104 resolved as shift
WARNING: shift/reduce conflict for FOR in state 104 resolved as shift
WARNING: shift/reduce conflict for DEF in state 104 resolved as shift
WARNING: shift/reduce conflict for DO in state 104 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 110 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 110 resolved as shift
WARNING: shift/reduce conflict for ID in state 110 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 110 resolved as shift
WARNING: shift/reduce conflict for IF in state 110 resolved as shift
WARNING: shift/reduce conflict for FOR in state 110 resolved as shift
WARNING: shift/reduce conflict for DEF in state 110 resolved as shift
WARNING: shift/reduce conflict for DO in state 110 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 111 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 111 resolved as shift
WARNING: shift/reduce conflict for ID in state 111 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 111 resolved as shift
WARNING: shift/reduce conflict for IF in state 111 resolved as shift
WARNING: shift/reduce conflict for FOR in state 111 resolved as shift
WARNING: shift/reduce conflict for DEF in state 111 resolved as shift
WARNING: shift/reduce conflict for DO in state 111 resolved as shift
WARNING: shift/reduce conflict for LLAVDER in state 112 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 112 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 112 resolved as shift
WARNING: shift/reduce conflict for ID in state 112 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 112 resolved as shift
WARNING: shift/reduce conflict for IF in state 112 resolved as shift
WARNING: shift/reduce conflict for FOR in state 112 resolved as shift
WARNING: shift/reduce conflict for DEF in state 112 resolved as shift
WARNING: shift/reduce conflict for DO in state 112 resolved as shift
WARNING: shift/reduce conflict for LLAVDER in state 113 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 113 resolved as shift
WARNING: shift/reduce conflict for NUMERO in state 113 resolved as shift
WARNING: shift/reduce conflict for ID in state 113 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 113 resolved as shift
WARNING: shift/reduce conflict for IF in state 113 resolved as shift
WARNING: shift/reduce conflict for FOR in state 113 resolved as shift
WARNING: shift/reduce conflict for DEF in state 113 resolved as shift
WARNING: shift/reduce conflict for DO in state 113 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (init -> instrucciones)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 14 resolved using rule (instruccion -> argument)
WARNING: rejected rule (argument_list -> argument) in state 14
WARNING: reduce/reduce conflict in state 15 resolved using rule (instruccion -> empty)
WARNING: rejected rule (argument_list -> empty) in state 15
