
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightIGUALrightIGUALQUEleftMAYQUEMENQUEleftMASMENOSleftPORDIVIDIDOleftPARIZQPARDERleftLLAVIZQLLAVDERAND BREAK COMA CONCAT DECIMAL DEF DIVIDIDO DOBPUNTO ELIF ELSE ENTERO FOR ID IF IGUAL IGUALQUE IN LLAVDER LLAVIZQ MAS MAYIGUAL MAYQUE MENIGUAL MENOS MENQUE NIGUALQUE OR PARDER PARIZQ POR PRINT PTCOMA RANGE RETURN STRING WHILEinit : instrucciones\n    instrucciones : imprimir_instr instrucciones\n                   | asignacion_instr instrucciones\n                   | if_instr instrucciones\n                   | elif_instr instrucciones\n                   | else_instr instrucciones\n                   | while_instr instrucciones    \n                   | empty\n                   | for_instr instrucciones\n    if_instr : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER \n                | IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER elif_instr\n    if_instr : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER else_instrelif_instr : ELIF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER\n                  | ELIF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER else_instrelse_instr : ELSE LLAVIZQ instrucciones LLAVDERwhile_instr : WHILE PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERasignacion_instr : ID IGUAL expresion PTCOMAasignacion_instr_increment : ID IGUAL ID MAS ENTERO PTCOMA\n                                  | ID IGUAL ID MENOS ENTERO PTCOMA \n    expresion : ENTERO\n                 | DECIMAL\n                 | STRING        \n    expresion : IDimprimir_instr : PRINT PARIZQ expresion PARDER PTCOMA\n                      | PRINT PARIZQ expresion_logica PARDER PTCOMA\n    expresion_logica : expresion MENQUE expresion\n                        | expresion MAYQUE expresion\n                        | expresion IGUALQUE expresion\n                        | expresion NIGUALQUE expresion\n                        | expresion MENIGUAL expresion\n                        | expresion MAYIGUAL expresion\n    expresion_logica : PARIZQ expresion_logica PARDER MENQUE PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER MAYQUE PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER IGUALQUE PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER NIGUALQUE PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER MAYIGUAL PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER MENIGUAL PARIZQ expresion_logica PARDER\n    expresion_logica : PARIZQ expresion_logica PARDER AND PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER OR PARIZQ expresion_logica PARDER\n                        | expresion_logica AND expresion_logica\n                        | expresion_logica OR expresion_logica\n    expresion : expresion MAS expresion\n                 | expresion MENOS expresion\n                 | expresion POR expresion\n                 | expresion DIVIDIDO expresion\n    for_instr : FOR PARIZQ ID IN expresion PARDER LLAVIZQ instrucciones LLAVDERempty :'
    
_lr_action_items = {'PRINT':([0,3,4,5,6,7,8,10,29,61,64,68,79,82,83,84,106,107,108,109,118,119,120,130,],[11,11,11,11,11,11,11,11,11,-17,-15,-24,-25,11,11,11,-10,-13,-16,11,-11,-12,-14,-46,]),'ID':([0,3,4,5,6,7,8,10,25,26,27,28,29,30,31,32,48,49,50,51,52,53,54,55,56,57,59,60,61,64,66,68,79,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,118,119,120,130,],[12,12,12,12,12,12,12,12,38,38,38,38,12,38,45,38,38,38,38,38,38,38,38,38,38,38,38,38,-17,-15,38,-24,-25,12,12,12,38,38,38,38,38,38,38,38,-10,-13,-16,12,-11,-12,-14,-46,]),'IF':([0,3,4,5,6,7,8,10,29,61,64,68,79,82,83,84,106,107,108,109,118,119,120,130,],[13,13,13,13,13,13,13,13,13,-17,-15,-24,-25,13,13,13,-10,-13,-16,13,-11,-12,-14,-46,]),'ELIF':([0,3,4,5,6,7,8,10,29,61,64,68,79,82,83,84,106,107,108,109,118,119,120,130,],[14,14,14,14,14,14,14,14,14,-17,-15,-24,-25,14,14,14,-10,-13,-16,14,-11,-12,-14,-46,]),'ELSE':([0,3,4,5,6,7,8,10,29,61,64,68,79,82,83,84,106,107,108,109,118,119,120,130,],[15,15,15,15,15,15,15,15,15,-17,-15,-24,-25,15,15,15,-10,-13,-16,15,-11,-12,-14,-46,]),'WHILE':([0,3,4,5,6,7,8,10,29,61,64,68,79,82,83,84,106,107,108,109,118,119,120,130,],[16,16,16,16,16,16,16,16,16,-17,-15,-24,-25,16,16,16,-10,-13,-16,16,-11,-12,-14,-46,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,18,19,20,21,22,23,24,61,64,68,79,106,107,108,118,119,120,130,],[-47,0,-1,-47,-47,-47,-47,-47,-47,-8,-47,-2,-3,-4,-5,-6,-7,-9,-17,-15,-24,-25,-10,-13,-16,-11,-12,-14,-46,]),'FOR':([0,3,4,5,6,7,8,10,29,61,64,68,79,82,83,84,106,107,108,109,118,119,120,130,],[17,17,17,17,17,17,17,17,17,-17,-15,-24,-25,17,17,17,-10,-13,-16,17,-11,-12,-14,-46,]),'LLAVDER':([3,4,5,6,7,8,9,10,18,19,20,21,22,23,24,29,43,61,64,68,79,82,83,84,94,95,96,106,107,108,109,118,119,120,121,130,],[-47,-47,-47,-47,-47,-47,-8,-47,-2,-3,-4,-5,-6,-7,-9,-47,64,-17,-15,-24,-25,-47,-47,-47,106,107,108,-10,-13,-16,-47,-11,-12,-14,130,-46,]),'PARIZQ':([11,13,14,16,17,25,27,28,30,32,59,60,86,87,88,89,90,91,92,93,98,99,100,101,102,103,104,105,],[25,27,28,30,31,32,32,32,32,32,32,32,98,99,100,101,102,103,104,105,32,32,32,32,32,32,32,32,]),'IGUAL':([12,],[26,]),'LLAVIZQ':([15,62,63,65,97,],[29,82,83,84,109,]),'ENTERO':([25,26,27,28,30,32,48,49,50,51,52,53,54,55,56,57,59,60,66,98,99,100,101,102,103,104,105,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'DECIMAL':([25,26,27,28,30,32,48,49,50,51,52,53,54,55,56,57,59,60,66,98,99,100,101,102,103,104,105,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'STRING':([25,26,27,28,30,32,48,49,50,51,52,53,54,55,56,57,59,60,66,98,99,100,101,102,103,104,105,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'PARDER':([33,34,35,36,37,38,40,42,44,46,69,70,71,72,73,74,75,76,77,78,80,81,85,110,111,112,113,114,115,116,117,122,123,124,125,126,127,128,129,],[47,58,-20,-21,-22,-23,62,63,65,67,-42,-43,-44,-45,-26,-27,-28,-29,-30,-31,-40,-41,97,122,123,124,125,126,127,128,129,-32,-33,-34,-35,-36,-37,-38,-39,]),'MAS':([33,35,36,37,38,39,41,69,70,71,72,73,74,75,76,77,78,85,],[48,-20,-21,-22,-23,48,48,-42,-43,-44,-45,48,48,48,48,48,48,48,]),'MENOS':([33,35,36,37,38,39,41,69,70,71,72,73,74,75,76,77,78,85,],[49,-20,-21,-22,-23,49,49,-42,-43,-44,-45,49,49,49,49,49,49,49,]),'POR':([33,35,36,37,38,39,41,69,70,71,72,73,74,75,76,77,78,85,],[50,-20,-21,-22,-23,50,50,50,50,-44,-45,50,50,50,50,50,50,50,]),'DIVIDIDO':([33,35,36,37,38,39,41,69,70,71,72,73,74,75,76,77,78,85,],[51,-20,-21,-22,-23,51,51,51,51,-44,-45,51,51,51,51,51,51,51,]),'MENQUE':([33,35,36,37,38,41,67,69,70,71,72,],[52,-20,-21,-22,-23,52,86,-42,-43,-44,-45,]),'MAYQUE':([33,35,36,37,38,41,67,69,70,71,72,],[53,-20,-21,-22,-23,53,87,-42,-43,-44,-45,]),'IGUALQUE':([33,35,36,37,38,41,67,69,70,71,72,],[54,-20,-21,-22,-23,54,88,-42,-43,-44,-45,]),'NIGUALQUE':([33,35,36,37,38,41,67,69,70,71,72,],[55,-20,-21,-22,-23,55,89,-42,-43,-44,-45,]),'MENIGUAL':([33,35,36,37,38,41,67,69,70,71,72,],[56,-20,-21,-22,-23,56,91,-42,-43,-44,-45,]),'MAYIGUAL':([33,35,36,37,38,41,67,69,70,71,72,],[57,-20,-21,-22,-23,57,90,-42,-43,-44,-45,]),'AND':([34,35,36,37,38,40,42,44,46,67,69,70,71,72,73,74,75,76,77,78,80,81,110,111,112,113,114,115,116,117,122,123,124,125,126,127,128,129,],[59,-20,-21,-22,-23,59,59,59,59,92,-42,-43,-44,-45,-26,-27,-28,-29,-30,-31,59,59,59,59,59,59,59,59,59,59,-32,-33,-34,-35,-36,-37,-38,-39,]),'OR':([34,35,36,37,38,40,42,44,46,67,69,70,71,72,73,74,75,76,77,78,80,81,110,111,112,113,114,115,116,117,122,123,124,125,126,127,128,129,],[60,-20,-21,-22,-23,60,60,60,60,93,-42,-43,-44,-45,-26,-27,-28,-29,-30,-31,60,60,60,60,60,60,60,60,60,60,-32,-33,-34,-35,-36,-37,-38,-39,]),'PTCOMA':([35,36,37,38,39,47,58,69,70,71,72,],[-20,-21,-22,-23,61,68,79,-42,-43,-44,-45,]),'IN':([45,],[66,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,3,4,5,6,7,8,10,29,82,83,84,109,],[2,18,19,20,21,22,23,24,43,94,95,96,121,]),'imprimir_instr':([0,3,4,5,6,7,8,10,29,82,83,84,109,],[3,3,3,3,3,3,3,3,3,3,3,3,3,]),'asignacion_instr':([0,3,4,5,6,7,8,10,29,82,83,84,109,],[4,4,4,4,4,4,4,4,4,4,4,4,4,]),'if_instr':([0,3,4,5,6,7,8,10,29,82,83,84,109,],[5,5,5,5,5,5,5,5,5,5,5,5,5,]),'elif_instr':([0,3,4,5,6,7,8,10,29,82,83,84,106,109,],[6,6,6,6,6,6,6,6,6,6,6,6,118,6,]),'else_instr':([0,3,4,5,6,7,8,10,29,82,83,84,106,107,109,],[7,7,7,7,7,7,7,7,7,7,7,7,119,120,7,]),'while_instr':([0,3,4,5,6,7,8,10,29,82,83,84,109,],[8,8,8,8,8,8,8,8,8,8,8,8,8,]),'empty':([0,3,4,5,6,7,8,10,29,82,83,84,109,],[9,9,9,9,9,9,9,9,9,9,9,9,9,]),'for_instr':([0,3,4,5,6,7,8,10,29,82,83,84,109,],[10,10,10,10,10,10,10,10,10,10,10,10,10,]),'expresion':([25,26,27,28,30,32,48,49,50,51,52,53,54,55,56,57,59,60,66,98,99,100,101,102,103,104,105,],[33,39,41,41,41,41,69,70,71,72,73,74,75,76,77,78,41,41,85,41,41,41,41,41,41,41,41,]),'expresion_logica':([25,27,28,30,32,59,60,98,99,100,101,102,103,104,105,],[34,40,42,44,46,80,81,110,111,112,113,114,115,116,117,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','AnalizadorParser.py',17),
  ('instrucciones -> imprimir_instr instrucciones','instrucciones',2,'p_instrucciones','AnalizadorParser.py',22),
  ('instrucciones -> asignacion_instr instrucciones','instrucciones',2,'p_instrucciones','AnalizadorParser.py',23),
  ('instrucciones -> if_instr instrucciones','instrucciones',2,'p_instrucciones','AnalizadorParser.py',24),
  ('instrucciones -> elif_instr instrucciones','instrucciones',2,'p_instrucciones','AnalizadorParser.py',25),
  ('instrucciones -> else_instr instrucciones','instrucciones',2,'p_instrucciones','AnalizadorParser.py',26),
  ('instrucciones -> while_instr instrucciones','instrucciones',2,'p_instrucciones','AnalizadorParser.py',27),
  ('instrucciones -> empty','instrucciones',1,'p_instrucciones','AnalizadorParser.py',28),
  ('instrucciones -> for_instr instrucciones','instrucciones',2,'p_instrucciones','AnalizadorParser.py',29),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','if_instr',7,'p_if','AnalizadorParser.py',35),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER elif_instr','if_instr',8,'p_if','AnalizadorParser.py',36),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER else_instr','if_instr',8,'p_if_else','AnalizadorParser.py',47),
  ('elif_instr -> ELIF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','elif_instr',7,'p_elif','AnalizadorParser.py',57),
  ('elif_instr -> ELIF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER else_instr','elif_instr',8,'p_elif','AnalizadorParser.py',58),
  ('else_instr -> ELSE LLAVIZQ instrucciones LLAVDER','else_instr',4,'p_else','AnalizadorParser.py',68),
  ('while_instr -> WHILE PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','while_instr',7,'p_while','AnalizadorParser.py',72),
  ('asignacion_instr -> ID IGUAL expresion PTCOMA','asignacion_instr',4,'p_asignacion','AnalizadorParser.py',77),
  ('asignacion_instr_increment -> ID IGUAL ID MAS ENTERO PTCOMA','asignacion_instr_increment',6,'p_asignacion_increment','AnalizadorParser.py',82),
  ('asignacion_instr_increment -> ID IGUAL ID MENOS ENTERO PTCOMA','asignacion_instr_increment',6,'p_asignacion_increment','AnalizadorParser.py',83),
  ('expresion -> ENTERO','expresion',1,'p_asignacion_tipo','AnalizadorParser.py',95),
  ('expresion -> DECIMAL','expresion',1,'p_asignacion_tipo','AnalizadorParser.py',96),
  ('expresion -> STRING','expresion',1,'p_asignacion_tipo','AnalizadorParser.py',97),
  ('expresion -> ID','expresion',1,'p_expresion_id','AnalizadorParser.py',102),
  ('imprimir_instr -> PRINT PARIZQ expresion PARDER PTCOMA','imprimir_instr',5,'p_print','AnalizadorParser.py',106),
  ('imprimir_instr -> PRINT PARIZQ expresion_logica PARDER PTCOMA','imprimir_instr',5,'p_print','AnalizadorParser.py',107),
  ('expresion_logica -> expresion MENQUE expresion','expresion_logica',3,'p_expresion_logica','AnalizadorParser.py',112),
  ('expresion_logica -> expresion MAYQUE expresion','expresion_logica',3,'p_expresion_logica','AnalizadorParser.py',113),
  ('expresion_logica -> expresion IGUALQUE expresion','expresion_logica',3,'p_expresion_logica','AnalizadorParser.py',114),
  ('expresion_logica -> expresion NIGUALQUE expresion','expresion_logica',3,'p_expresion_logica','AnalizadorParser.py',115),
  ('expresion_logica -> expresion MENIGUAL expresion','expresion_logica',3,'p_expresion_logica','AnalizadorParser.py',116),
  ('expresion_logica -> expresion MAYIGUAL expresion','expresion_logica',3,'p_expresion_logica','AnalizadorParser.py',117),
  ('expresion_logica -> PARIZQ expresion_logica PARDER MENQUE PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_logica_group','AnalizadorParser.py',131),
  ('expresion_logica -> PARIZQ expresion_logica PARDER MAYQUE PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_logica_group','AnalizadorParser.py',132),
  ('expresion_logica -> PARIZQ expresion_logica PARDER IGUALQUE PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_logica_group','AnalizadorParser.py',133),
  ('expresion_logica -> PARIZQ expresion_logica PARDER NIGUALQUE PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_logica_group','AnalizadorParser.py',134),
  ('expresion_logica -> PARIZQ expresion_logica PARDER MAYIGUAL PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_logica_group','AnalizadorParser.py',135),
  ('expresion_logica -> PARIZQ expresion_logica PARDER MENIGUAL PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_logica_group','AnalizadorParser.py',136),
  ('expresion_logica -> PARIZQ expresion_logica PARDER AND PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_operador_logico','AnalizadorParser.py',146),
  ('expresion_logica -> PARIZQ expresion_logica PARDER OR PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_operador_logico','AnalizadorParser.py',147),
  ('expresion_logica -> expresion_logica AND expresion_logica','expresion_logica',3,'p_expresion_operador_logico','AnalizadorParser.py',148),
  ('expresion_logica -> expresion_logica OR expresion_logica','expresion_logica',3,'p_expresion_operador_logico','AnalizadorParser.py',149),
  ('expresion -> expresion MAS expresion','expresion',3,'p_expresion_operaciones','AnalizadorParser.py',157),
  ('expresion -> expresion MENOS expresion','expresion',3,'p_expresion_operaciones','AnalizadorParser.py',158),
  ('expresion -> expresion POR expresion','expresion',3,'p_expresion_operaciones','AnalizadorParser.py',159),
  ('expresion -> expresion DIVIDIDO expresion','expresion',3,'p_expresion_operaciones','AnalizadorParser.py',160),
  ('for_instr -> FOR PARIZQ ID IN expresion PARDER LLAVIZQ instrucciones LLAVDER','for_instr',9,'p_for','AnalizadorParser.py',172),
  ('empty -> <empty>','empty',0,'p_empty','AnalizadorParser.py',184),
]
