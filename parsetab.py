
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATleftMASMENOSleftPORDIVIDIDOrightUMENOSCADENA COMA CONCAT DECIMAL DEF DIVIDIDO ELSE ENTERO FOR ID IF IGUAL IGUALQUE IMPRIMIR LLAVDER LLAVIZQ MAS MAYIGUAL MAYQUE MENIGUAL MENOS MENQUE MIENTRAS NIGUALQUE NUMERO PARDER PARIZQ POR PTCOMA PTCOMACERRADO RETURN TOinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccion instruccion      : imprimir_instr\n                        | definicion_instr\n                        | asignacion_instr\n                        | mientras_instr\n                        | if_instr\n                        | if_else_instr\n                        | for_instr\n                        | for_asign\n    imprimir_instr     : IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMAdefinicion_instr   : NUMERO ID PTCOMAasignacion_instr   : ID IGUAL expresion_numerica PTCOMAmientras_instr     : MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERfor_asign : ID IGUAL expresion_numericafor_instr     : FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER\n    function_call : ID PARIZQ PARDER\n                  | ID PARIZQ expresion_numerica COMA expresion_numerica PARDER\n    \n    function : DEF ID PARIZQ argument_list_option PARDER LLAVIZQ instrucciones LLAVDER\n    \n    argument_list_option : argument_list\n                         \n    argument_list : argument_list COMA argument\n                  | argument\n                  \n    argument : ID\n    \n    return-statement : RETURN PTCOMA\n                     | RETURN expresion_numerica PTCOMA\n    if_instr           : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_else_instr      : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDERexpresion_numerica : expresion_numerica MAS expresion_numerica\n                        | expresion_numerica MENOS expresion_numerica\n                        | expresion_numerica POR expresion_numerica\n                        | expresion_numerica DIVIDIDO expresion_numericaexpresion_numerica : MENOS expresion_numerica %prec UMENOSexpresion_numerica : PARIZQ expresion_numerica PARDERexpresion_numerica : ENTERO\n                        | DECIMALexpresion_numerica   : IDexpresion_cadena     : expresion_cadena CONCAT expresion_cadenaexpresion_cadena     : CADENAexpresion_cadena     : expresion_numericaexpresion_logica : expresion_numerica MAYQUE expresion_numerica\n                        | expresion_numerica MENQUE expresion_numerica\n                        | expresion_numerica IGUALQUE expresion_numerica\n                        | expresion_numerica NIGUALQUE expresion_numerica\n                        | expresion_numerica MAYIGUAL expresion_numerica\n                        | expresion_numerica MENIGUAL expresion_numerica\n    '
    
_lr_action_items = {'IMPRIMIR':([0,2,3,4,5,6,7,8,9,10,11,18,30,31,32,33,34,47,48,59,60,62,63,64,65,66,73,76,77,79,80,84,85,86,87,88,89,],[12,12,-3,-4,-5,-6,-7,-8,-9,-10,-11,-2,-35,-36,-37,-13,-16,-33,-14,-34,-12,-29,-30,-31,-32,12,12,12,12,-15,-27,12,12,12,12,-28,-17,]),'NUMERO':([0,2,3,4,5,6,7,8,9,10,11,18,30,31,32,33,34,47,48,59,60,62,63,64,65,66,73,76,77,79,80,84,85,86,87,88,89,],[13,13,-3,-4,-5,-6,-7,-8,-9,-10,-11,-2,-35,-36,-37,-13,-16,-33,-14,-34,-12,-29,-30,-31,-32,13,13,13,13,-15,-27,13,13,13,13,-28,-17,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,13,18,19,21,22,23,24,25,29,30,31,32,33,34,42,43,44,45,46,47,48,50,51,52,53,54,55,57,58,59,60,62,63,64,65,66,73,76,77,78,79,80,84,85,86,87,88,89,],[14,14,-3,-4,-5,-6,-7,-8,-9,-10,-11,20,-2,32,32,32,32,39,32,32,-35,-36,-37,-13,-16,32,32,32,32,32,-33,-14,32,32,32,32,32,32,32,32,-34,-12,-29,-30,-31,-32,14,14,14,14,39,-15,-27,14,14,14,14,-28,-17,]),'MIENTRAS':([0,2,3,4,5,6,7,8,9,10,11,18,30,31,32,33,34,47,48,59,60,62,63,64,65,66,73,76,77,79,80,84,85,86,87,88,89,],[15,15,-3,-4,-5,-6,-7,-8,-9,-10,-11,-2,-35,-36,-37,-13,-16,-33,-14,-34,-12,-29,-30,-31,-32,15,15,15,15,-15,-27,15,15,15,15,-28,-17,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,18,30,31,32,33,34,47,48,59,60,62,63,64,65,66,73,76,77,79,80,84,85,86,87,88,89,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-11,-2,-35,-36,-37,-13,-16,-33,-14,-34,-12,-29,-30,-31,-32,16,16,16,16,-15,-27,16,16,16,16,-28,-17,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,18,30,31,32,33,34,47,48,59,60,62,63,64,65,66,73,76,77,79,80,84,85,86,87,88,89,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-2,-35,-36,-37,-13,-16,-33,-14,-34,-12,-29,-30,-31,-32,17,17,17,17,-15,-27,17,17,17,17,-28,-17,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,18,30,31,32,33,34,47,48,59,60,62,63,64,65,79,80,88,89,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-2,-35,-36,-37,-13,-16,-33,-14,-34,-12,-29,-30,-31,-32,-15,-27,-28,-17,]),'LLAVDER':([3,4,5,6,7,8,9,10,11,18,30,31,32,33,34,47,48,59,60,62,63,64,65,76,77,79,80,86,87,88,89,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-2,-35,-36,-37,-13,-16,-33,-14,-34,-12,-29,-30,-31,-32,79,80,-15,-27,88,89,-28,-17,]),'PARIZQ':([12,15,16,17,19,21,22,23,25,29,42,43,44,45,46,50,51,52,53,54,55,57,58,],[19,22,23,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'IGUAL':([14,39,],[21,58,]),'CADENA':([19,42,],[27,27,]),'MENOS':([19,21,22,23,25,28,29,30,31,32,34,36,40,42,43,44,45,46,47,50,51,52,53,54,55,57,58,59,62,63,64,65,67,68,69,70,71,72,75,],[29,29,29,29,29,44,29,-35,-36,-37,44,44,44,29,29,29,29,29,-33,29,29,29,29,29,29,29,29,-34,-29,-30,-31,-32,44,44,44,44,44,44,44,]),'ENTERO':([19,21,22,23,25,29,42,43,44,45,46,50,51,52,53,54,55,57,58,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'DECIMAL':([19,21,22,23,25,29,42,43,44,45,46,50,51,52,53,54,55,57,58,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'PTCOMA':([20,30,31,32,34,41,47,59,62,63,64,65,],[33,-35,-36,-37,48,60,-33,-34,-29,-30,-31,-32,]),'PARDER':([26,27,28,30,31,32,35,37,40,47,59,61,62,63,64,65,67,68,69,70,71,72,75,81,],[41,-39,-40,-35,-36,-37,49,56,59,-33,-34,-38,-29,-30,-31,-32,-41,-42,-43,-44,-45,-46,-16,83,]),'CONCAT':([26,27,28,30,31,32,47,59,61,62,63,64,65,],[42,-39,-40,-35,-36,-37,-33,-34,-38,-29,-30,-31,-32,]),'MAS':([28,30,31,32,34,36,40,47,59,62,63,64,65,67,68,69,70,71,72,75,],[43,-35,-36,-37,43,43,43,-33,-34,-29,-30,-31,-32,43,43,43,43,43,43,43,]),'POR':([28,30,31,32,34,36,40,47,59,62,63,64,65,67,68,69,70,71,72,75,],[45,-35,-36,-37,45,45,45,-33,-34,45,45,-31,-32,45,45,45,45,45,45,45,]),'DIVIDIDO':([28,30,31,32,34,36,40,47,59,62,63,64,65,67,68,69,70,71,72,75,],[46,-35,-36,-37,46,46,46,-33,-34,46,46,-31,-32,46,46,46,46,46,46,46,]),'MAYQUE':([30,31,32,36,47,59,62,63,64,65,],[-35,-36,-37,50,-33,-34,-29,-30,-31,-32,]),'MENQUE':([30,31,32,36,47,59,62,63,64,65,],[-35,-36,-37,51,-33,-34,-29,-30,-31,-32,]),'IGUALQUE':([30,31,32,36,47,59,62,63,64,65,],[-35,-36,-37,52,-33,-34,-29,-30,-31,-32,]),'NIGUALQUE':([30,31,32,36,47,59,62,63,64,65,],[-35,-36,-37,53,-33,-34,-29,-30,-31,-32,]),'MAYIGUAL':([30,31,32,36,47,59,62,63,64,65,],[-35,-36,-37,54,-33,-34,-29,-30,-31,-32,]),'MENIGUAL':([30,31,32,36,47,59,62,63,64,65,],[-35,-36,-37,55,-33,-34,-29,-30,-31,-32,]),'PTCOMACERRADO':([30,31,32,38,47,59,62,63,64,65,67,68,69,70,71,72,74,75,],[-35,-36,-37,57,-33,-34,-29,-30,-31,-32,-41,-42,-43,-44,-45,-46,78,-16,]),'LLAVIZQ':([49,56,82,83,],[66,73,84,85,]),'ELSE':([80,],[82,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,66,73,84,85,],[2,76,77,86,87,]),'instruccion':([0,2,66,73,76,77,84,85,86,87,],[3,18,3,3,18,18,3,3,18,18,]),'imprimir_instr':([0,2,66,73,76,77,84,85,86,87,],[4,4,4,4,4,4,4,4,4,4,]),'definicion_instr':([0,2,66,73,76,77,84,85,86,87,],[5,5,5,5,5,5,5,5,5,5,]),'asignacion_instr':([0,2,66,73,76,77,84,85,86,87,],[6,6,6,6,6,6,6,6,6,6,]),'mientras_instr':([0,2,66,73,76,77,84,85,86,87,],[7,7,7,7,7,7,7,7,7,7,]),'if_instr':([0,2,66,73,76,77,84,85,86,87,],[8,8,8,8,8,8,8,8,8,8,]),'if_else_instr':([0,2,66,73,76,77,84,85,86,87,],[9,9,9,9,9,9,9,9,9,9,]),'for_instr':([0,2,66,73,76,77,84,85,86,87,],[10,10,10,10,10,10,10,10,10,10,]),'for_asign':([0,2,24,66,73,76,77,78,84,85,86,87,],[11,11,38,11,11,11,11,81,11,11,11,11,]),'expresion_cadena':([19,42,],[26,61,]),'expresion_numerica':([19,21,22,23,25,29,42,43,44,45,46,50,51,52,53,54,55,57,58,],[28,34,36,36,40,47,28,62,63,64,65,67,68,69,70,71,72,36,75,]),'expresion_logica':([22,23,57,],[35,37,74,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','gramatica.py',130),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','gramatica.py',134),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','gramatica.py',139),
  ('instruccion -> imprimir_instr','instruccion',1,'p_instruccion','gramatica.py',143),
  ('instruccion -> definicion_instr','instruccion',1,'p_instruccion','gramatica.py',144),
  ('instruccion -> asignacion_instr','instruccion',1,'p_instruccion','gramatica.py',145),
  ('instruccion -> mientras_instr','instruccion',1,'p_instruccion','gramatica.py',146),
  ('instruccion -> if_instr','instruccion',1,'p_instruccion','gramatica.py',147),
  ('instruccion -> if_else_instr','instruccion',1,'p_instruccion','gramatica.py',148),
  ('instruccion -> for_instr','instruccion',1,'p_instruccion','gramatica.py',149),
  ('instruccion -> for_asign','instruccion',1,'p_instruccion','gramatica.py',150),
  ('imprimir_instr -> IMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA','imprimir_instr',5,'p_instruccion_imprimir','gramatica.py',155),
  ('definicion_instr -> NUMERO ID PTCOMA','definicion_instr',3,'p_instruccion_definicion','gramatica.py',159),
  ('asignacion_instr -> ID IGUAL expresion_numerica PTCOMA','asignacion_instr',4,'p_asignacion_instr','gramatica.py',163),
  ('mientras_instr -> MIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','mientras_instr',7,'p_mientras_instr','gramatica.py',167),
  ('for_asign -> ID IGUAL expresion_numerica','for_asign',3,'p_for_asign','gramatica.py',171),
  ('for_instr -> FOR PARIZQ for_asign PTCOMACERRADO expresion_logica PTCOMACERRADO for_asign PARDER LLAVIZQ instrucciones LLAVDER','for_instr',11,'p_for_instr','gramatica.py',175),
  ('function_call -> ID PARIZQ PARDER','function_call',3,'p_function_call','gramatica.py',181),
  ('function_call -> ID PARIZQ expresion_numerica COMA expresion_numerica PARDER','function_call',6,'p_function_call','gramatica.py',182),
  ('function -> DEF ID PARIZQ argument_list_option PARDER LLAVIZQ instrucciones LLAVDER','function',8,'p_function','gramatica.py',188),
  ('argument_list_option -> argument_list','argument_list_option',1,'p_function','gramatica.py',190),
  ('argument_list -> argument_list COMA argument','argument_list',3,'p_function','gramatica.py',192),
  ('argument_list -> argument','argument_list',1,'p_function','gramatica.py',193),
  ('argument -> ID','argument',1,'p_function','gramatica.py',195),
  ('return-statement -> RETURN PTCOMA','return-statement',2,'p_return_statement','gramatica.py',202),
  ('return-statement -> RETURN expresion_numerica PTCOMA','return-statement',3,'p_return_statement','gramatica.py',203),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','if_instr',7,'p_if_instr','gramatica.py',211),
  ('if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER','if_else_instr',11,'p_if_else_instr','gramatica.py',215),
  ('expresion_numerica -> expresion_numerica MAS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','gramatica.py',219),
  ('expresion_numerica -> expresion_numerica MENOS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','gramatica.py',220),
  ('expresion_numerica -> expresion_numerica POR expresion_numerica','expresion_numerica',3,'p_expresion_binaria','gramatica.py',221),
  ('expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica','expresion_numerica',3,'p_expresion_binaria','gramatica.py',222),
  ('expresion_numerica -> MENOS expresion_numerica','expresion_numerica',2,'p_expresion_unaria','gramatica.py',229),
  ('expresion_numerica -> PARIZQ expresion_numerica PARDER','expresion_numerica',3,'p_expresion_agrupacion','gramatica.py',233),
  ('expresion_numerica -> ENTERO','expresion_numerica',1,'p_expresion_number','gramatica.py',237),
  ('expresion_numerica -> DECIMAL','expresion_numerica',1,'p_expresion_number','gramatica.py',238),
  ('expresion_numerica -> ID','expresion_numerica',1,'p_expresion_id','gramatica.py',242),
  ('expresion_cadena -> expresion_cadena CONCAT expresion_cadena','expresion_cadena',3,'p_expresion_concatenacion','gramatica.py',246),
  ('expresion_cadena -> CADENA','expresion_cadena',1,'p_expresion_cadena','gramatica.py',250),
  ('expresion_cadena -> expresion_numerica','expresion_cadena',1,'p_expresion_cadena_numerico','gramatica.py',254),
  ('expresion_logica -> expresion_numerica MAYQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','gramatica.py',258),
  ('expresion_logica -> expresion_numerica MENQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','gramatica.py',259),
  ('expresion_logica -> expresion_numerica IGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','gramatica.py',260),
  ('expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','gramatica.py',261),
  ('expresion_logica -> expresion_numerica MAYIGUAL expresion_numerica','expresion_logica',3,'p_expresion_logica','gramatica.py',262),
  ('expresion_logica -> expresion_numerica MENIGUAL expresion_numerica','expresion_logica',3,'p_expresion_logica','gramatica.py',263),
]
